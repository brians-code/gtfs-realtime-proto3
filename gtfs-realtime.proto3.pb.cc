// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto3

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gtfs-realtime.proto3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transit_realtime {

namespace {

const ::google::protobuf::Descriptor* FeedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeedHeader_Incrementality_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeedEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripUpdate_StopTimeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripUpdate_StopTimeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripUpdate_StopTimeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripUpdate_StopTimeUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehiclePosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehiclePosition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehiclePosition_OccupancyStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Alert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alert_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Alert_Cause_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Alert_Effect_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TimeRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntitySelector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntitySelector_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslatedString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslatedString_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslatedString_Translation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslatedString_Translation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gtfs_2drealtime_2eproto3() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_gtfs_2drealtime_2eproto3() {
  protobuf_AddDesc_gtfs_2drealtime_2eproto3();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gtfs-realtime.proto3");
  GOOGLE_CHECK(file != NULL);
  FeedMessage_descriptor_ = file->message_type(0);
  static const int FeedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, entity_),
  };
  FeedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedMessage_descriptor_,
      FeedMessage::internal_default_instance(),
      FeedMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, _internal_metadata_));
  FeedHeader_descriptor_ = file->message_type(1);
  static const int FeedHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, gtfs_realtime_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, incrementality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, timestamp_),
  };
  FeedHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedHeader_descriptor_,
      FeedHeader::internal_default_instance(),
      FeedHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, _internal_metadata_));
  FeedHeader_Incrementality_descriptor_ = FeedHeader_descriptor_->enum_type(0);
  FeedEntity_descriptor_ = file->message_type(2);
  static const int FeedEntity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, is_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, trip_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, alert_),
  };
  FeedEntity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedEntity_descriptor_,
      FeedEntity::internal_default_instance(),
      FeedEntity_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedEntity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, _internal_metadata_));
  TripUpdate_descriptor_ = file->message_type(3);
  static const int TripUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, stop_time_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, delay_),
  };
  TripUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TripUpdate_descriptor_,
      TripUpdate::internal_default_instance(),
      TripUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TripUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, _internal_metadata_));
  TripUpdate_StopTimeEvent_descriptor_ = TripUpdate_descriptor_->nested_type(0);
  static const int TripUpdate_StopTimeEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, uncertainty_),
  };
  TripUpdate_StopTimeEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TripUpdate_StopTimeEvent_descriptor_,
      TripUpdate_StopTimeEvent::internal_default_instance(),
      TripUpdate_StopTimeEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(TripUpdate_StopTimeEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, _internal_metadata_));
  TripUpdate_StopTimeUpdate_descriptor_ = TripUpdate_descriptor_->nested_type(1);
  static const int TripUpdate_StopTimeUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, stop_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, stop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, arrival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, departure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, schedule_relationship_),
  };
  TripUpdate_StopTimeUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TripUpdate_StopTimeUpdate_descriptor_,
      TripUpdate_StopTimeUpdate::internal_default_instance(),
      TripUpdate_StopTimeUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TripUpdate_StopTimeUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, _internal_metadata_));
  TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor_ = TripUpdate_StopTimeUpdate_descriptor_->enum_type(0);
  VehiclePosition_descriptor_ = file->message_type(4);
  static const int VehiclePosition_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, current_stop_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, stop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, current_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, congestion_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, occupancy_status_),
  };
  VehiclePosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehiclePosition_descriptor_,
      VehiclePosition::internal_default_instance(),
      VehiclePosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehiclePosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, _internal_metadata_));
  VehiclePosition_VehicleStopStatus_descriptor_ = VehiclePosition_descriptor_->enum_type(0);
  VehiclePosition_CongestionLevel_descriptor_ = VehiclePosition_descriptor_->enum_type(1);
  VehiclePosition_OccupancyStatus_descriptor_ = VehiclePosition_descriptor_->enum_type(2);
  Alert_descriptor_ = file->message_type(5);
  static const int Alert_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, active_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, informed_entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, header_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, description_text_),
  };
  Alert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Alert_descriptor_,
      Alert::internal_default_instance(),
      Alert_offsets_,
      -1,
      -1,
      -1,
      sizeof(Alert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _internal_metadata_));
  Alert_Cause_descriptor_ = Alert_descriptor_->enum_type(0);
  Alert_Effect_descriptor_ = Alert_descriptor_->enum_type(1);
  TimeRange_descriptor_ = file->message_type(6);
  static const int TimeRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, end_),
  };
  TimeRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeRange_descriptor_,
      TimeRange::internal_default_instance(),
      TimeRange_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, _internal_metadata_));
  Position_descriptor_ = file->message_type(7);
  static const int Position_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, odometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, speed_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::internal_default_instance(),
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_));
  TripDescriptor_descriptor_ = file->message_type(8);
  static const int TripDescriptor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, trip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, direction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, schedule_relationship_),
  };
  TripDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TripDescriptor_descriptor_,
      TripDescriptor::internal_default_instance(),
      TripDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(TripDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, _internal_metadata_));
  TripDescriptor_ScheduleRelationship_descriptor_ = TripDescriptor_descriptor_->enum_type(0);
  VehicleDescriptor_descriptor_ = file->message_type(9);
  static const int VehicleDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, license_plate_),
  };
  VehicleDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleDescriptor_descriptor_,
      VehicleDescriptor::internal_default_instance(),
      VehicleDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, _internal_metadata_));
  EntitySelector_descriptor_ = file->message_type(10);
  static const int EntitySelector_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, agency_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, route_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, stop_id_),
  };
  EntitySelector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntitySelector_descriptor_,
      EntitySelector::internal_default_instance(),
      EntitySelector_offsets_,
      -1,
      -1,
      -1,
      sizeof(EntitySelector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, _internal_metadata_));
  TranslatedString_descriptor_ = file->message_type(11);
  static const int TranslatedString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString, translation_),
  };
  TranslatedString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TranslatedString_descriptor_,
      TranslatedString::internal_default_instance(),
      TranslatedString_offsets_,
      -1,
      -1,
      -1,
      sizeof(TranslatedString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString, _internal_metadata_));
  TranslatedString_Translation_descriptor_ = TranslatedString_descriptor_->nested_type(0);
  static const int TranslatedString_Translation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, language_),
  };
  TranslatedString_Translation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TranslatedString_Translation_descriptor_,
      TranslatedString_Translation::internal_default_instance(),
      TranslatedString_Translation_offsets_,
      -1,
      -1,
      -1,
      sizeof(TranslatedString_Translation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gtfs_2drealtime_2eproto3);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedMessage_descriptor_, FeedMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedHeader_descriptor_, FeedHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedEntity_descriptor_, FeedEntity::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TripUpdate_descriptor_, TripUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TripUpdate_StopTimeEvent_descriptor_, TripUpdate_StopTimeEvent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TripUpdate_StopTimeUpdate_descriptor_, TripUpdate_StopTimeUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehiclePosition_descriptor_, VehiclePosition::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Alert_descriptor_, Alert::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeRange_descriptor_, TimeRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, Position::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TripDescriptor_descriptor_, TripDescriptor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleDescriptor_descriptor_, VehicleDescriptor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntitySelector_descriptor_, EntitySelector::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TranslatedString_descriptor_, TranslatedString::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TranslatedString_Translation_descriptor_, TranslatedString_Translation::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gtfs_2drealtime_2eproto3() {
  FeedMessage_default_instance_.Shutdown();
  delete FeedMessage_reflection_;
  FeedHeader_default_instance_.Shutdown();
  delete FeedHeader_reflection_;
  FeedEntity_default_instance_.Shutdown();
  delete FeedEntity_reflection_;
  TripUpdate_default_instance_.Shutdown();
  delete TripUpdate_reflection_;
  TripUpdate_StopTimeEvent_default_instance_.Shutdown();
  delete TripUpdate_StopTimeEvent_reflection_;
  TripUpdate_StopTimeUpdate_default_instance_.Shutdown();
  delete TripUpdate_StopTimeUpdate_reflection_;
  VehiclePosition_default_instance_.Shutdown();
  delete VehiclePosition_reflection_;
  Alert_default_instance_.Shutdown();
  delete Alert_reflection_;
  TimeRange_default_instance_.Shutdown();
  delete TimeRange_reflection_;
  Position_default_instance_.Shutdown();
  delete Position_reflection_;
  TripDescriptor_default_instance_.Shutdown();
  delete TripDescriptor_reflection_;
  VehicleDescriptor_default_instance_.Shutdown();
  delete VehicleDescriptor_reflection_;
  EntitySelector_default_instance_.Shutdown();
  delete EntitySelector_reflection_;
  TranslatedString_default_instance_.Shutdown();
  delete TranslatedString_reflection_;
  TranslatedString_Translation_default_instance_.Shutdown();
  delete TranslatedString_Translation_reflection_;
}

void protobuf_InitDefaults_gtfs_2drealtime_2eproto3_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  FeedMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FeedHeader_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FeedEntity_default_instance_.DefaultConstruct();
  TripUpdate_default_instance_.DefaultConstruct();
  TripUpdate_StopTimeEvent_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TripUpdate_StopTimeUpdate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VehiclePosition_default_instance_.DefaultConstruct();
  Alert_default_instance_.DefaultConstruct();
  TimeRange_default_instance_.DefaultConstruct();
  Position_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TripDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VehicleDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EntitySelector_default_instance_.DefaultConstruct();
  TranslatedString_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TranslatedString_Translation_default_instance_.DefaultConstruct();
  FeedMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  FeedHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  FeedEntity_default_instance_.get_mutable()->InitAsDefaultInstance();
  TripUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TripUpdate_StopTimeEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  TripUpdate_StopTimeUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  VehiclePosition_default_instance_.get_mutable()->InitAsDefaultInstance();
  Alert_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimeRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  Position_default_instance_.get_mutable()->InitAsDefaultInstance();
  TripDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  VehicleDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  EntitySelector_default_instance_.get_mutable()->InitAsDefaultInstance();
  TranslatedString_default_instance_.get_mutable()->InitAsDefaultInstance();
  TranslatedString_Translation_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_gtfs_2drealtime_2eproto3_once_);
void protobuf_InitDefaults_gtfs_2drealtime_2eproto3() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_gtfs_2drealtime_2eproto3_once_,
                 &protobuf_InitDefaults_gtfs_2drealtime_2eproto3_impl);
}
void protobuf_AddDesc_gtfs_2drealtime_2eproto3_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024gtfs-realtime.proto3\022\020transit_realtime"
    "\"i\n\013FeedMessage\022,\n\006header\030\001 \001(\0132\034.transi"
    "t_realtime.FeedHeader\022,\n\006entity\030\002 \003(\0132\034."
    "transit_realtime.FeedEntity\"\271\001\n\nFeedHead"
    "er\022\035\n\025gtfs_realtime_version\030\001 \001(\t\022C\n\016inc"
    "rementality\030\002 \001(\0162+.transit_realtime.Fee"
    "dHeader.Incrementality\022\021\n\ttimestamp\030\003 \001("
    "\004\"4\n\016Incrementality\022\020\n\014FULL_DATASET\020\000\022\020\n"
    "\014DIFFERENTIAL\020\001\"\273\001\n\nFeedEntity\022\n\n\002id\030\001 \001"
    "(\t\022\022\n\nis_deleted\030\002 \001(\010\0221\n\013trip_update\030\003 "
    "\001(\0132\034.transit_realtime.TripUpdate\0222\n\007veh"
    "icle\030\004 \001(\0132!.transit_realtime.VehiclePos"
    "ition\022&\n\005alert\030\005 \001(\0132\027.transit_realtime."
    "Alert\"\367\004\n\nTripUpdate\022.\n\004trip\030\001 \001(\0132 .tra"
    "nsit_realtime.TripDescriptor\0224\n\007vehicle\030"
    "\003 \001(\0132#.transit_realtime.VehicleDescript"
    "or\022E\n\020stop_time_update\030\002 \003(\0132+.transit_r"
    "ealtime.TripUpdate.StopTimeUpdate\022\021\n\ttim"
    "estamp\030\004 \001(\004\022\r\n\005delay\030\005 \001(\005\032A\n\rStopTimeE"
    "vent\022\r\n\005delay\030\001 \001(\005\022\014\n\004time\030\002 \001(\003\022\023\n\013unc"
    "ertainty\030\003 \001(\005\032\326\002\n\016StopTimeUpdate\022\025\n\rsto"
    "p_sequence\030\001 \001(\r\022\017\n\007stop_id\030\004 \001(\t\022;\n\007arr"
    "ival\030\002 \001(\0132*.transit_realtime.TripUpdate"
    ".StopTimeEvent\022=\n\tdeparture\030\003 \001(\0132*.tran"
    "sit_realtime.TripUpdate.StopTimeEvent\022_\n"
    "\025schedule_relationship\030\005 \001(\0162@.transit_r"
    "ealtime.TripUpdate.StopTimeUpdate.Schedu"
    "leRelationship\"\?\n\024ScheduleRelationship\022\r"
    "\n\tSCHEDULED\020\000\022\013\n\007SKIPPED\020\001\022\013\n\007NO_DATA\020\002\""
    "\311\006\n\017VehiclePosition\022.\n\004trip\030\001 \001(\0132 .tran"
    "sit_realtime.TripDescriptor\0224\n\007vehicle\030\010"
    " \001(\0132#.transit_realtime.VehicleDescripto"
    "r\022,\n\010position\030\002 \001(\0132\032.transit_realtime.P"
    "osition\022\035\n\025current_stop_sequence\030\003 \001(\r\022\017"
    "\n\007stop_id\030\007 \001(\t\022K\n\016current_status\030\004 \001(\0162"
    "3.transit_realtime.VehiclePosition.Vehic"
    "leStopStatus\022\021\n\ttimestamp\030\005 \001(\004\022K\n\020conge"
    "stion_level\030\006 \001(\01621.transit_realtime.Veh"
    "iclePosition.CongestionLevel\022K\n\020occupanc"
    "y_status\030\t \001(\01621.transit_realtime.Vehicl"
    "ePosition.OccupancyStatus\"G\n\021VehicleStop"
    "Status\022\017\n\013INCOMING_AT\020\000\022\016\n\nSTOPPED_AT\020\001\022"
    "\021\n\rIN_TRANSIT_TO\020\002\"}\n\017CongestionLevel\022\034\n"
    "\030UNKNOWN_CONGESTION_LEVEL\020\000\022\024\n\020RUNNING_S"
    "MOOTHLY\020\001\022\017\n\013STOP_AND_GO\020\002\022\016\n\nCONGESTION"
    "\020\003\022\025\n\021SEVERE_CONGESTION\020\004\"\257\001\n\017OccupancyS"
    "tatus\022\t\n\005EMPTY\020\000\022\030\n\024MANY_SEATS_AVAILABLE"
    "\020\001\022\027\n\023FEW_SEATS_AVAILABLE\020\002\022\026\n\022STANDING_"
    "ROOM_ONLY\020\003\022\036\n\032CRUSHED_STANDING_ROOM_ONL"
    "Y\020\004\022\010\n\004FULL\020\005\022\034\n\030NOT_ACCEPTING_PASSENGER"
    "S\020\006\"\304\006\n\005Alert\0222\n\ractive_period\030\001 \003(\0132\033.t"
    "ransit_realtime.TimeRange\0229\n\017informed_en"
    "tity\030\005 \003(\0132 .transit_realtime.EntitySele"
    "ctor\022,\n\005cause\030\006 \001(\0162\035.transit_realtime.A"
    "lert.Cause\022.\n\006effect\030\007 \001(\0162\036.transit_rea"
    "ltime.Alert.Effect\022/\n\003url\030\010 \001(\0132\".transi"
    "t_realtime.TranslatedString\0227\n\013header_te"
    "xt\030\n \001(\0132\".transit_realtime.TranslatedSt"
    "ring\022<\n\020description_text\030\013 \001(\0132\".transit"
    "_realtime.TranslatedString\"\362\001\n\005Cause\022\030\n\024"
    "PROTO3_DEFAULT_CAUSE\020\000\022\021\n\rUNKNOWN_CAUSE\020"
    "\001\022\017\n\013OTHER_CAUSE\020\002\022\025\n\021TECHNICAL_PROBLEM\020"
    "\003\022\n\n\006STRIKE\020\004\022\021\n\rDEMONSTRATION\020\005\022\014\n\010ACCI"
    "DENT\020\006\022\013\n\007HOLIDAY\020\007\022\013\n\007WEATHER\020\010\022\017\n\013MAIN"
    "TENANCE\020\t\022\020\n\014CONSTRUCTION\020\n\022\023\n\017POLICE_AC"
    "TIVITY\020\013\022\025\n\021MEDICAL_EMERGENCY\020\014\"\320\001\n\006Effe"
    "ct\022\031\n\025PROTO3_DEFAULT_EFFECT\020\000\022\016\n\nNO_SERV"
    "ICE\020\001\022\023\n\017REDUCED_SERVICE\020\002\022\026\n\022SIGNIFICAN"
    "T_DELAYS\020\003\022\n\n\006DETOUR\020\004\022\026\n\022ADDITIONAL_SER"
    "VICE\020\005\022\024\n\020MODIFIED_SERVICE\020\006\022\020\n\014OTHER_EF"
    "FECT\020\007\022\022\n\016UNKNOWN_EFFECT\020\010\022\016\n\nSTOP_MOVED"
    "\020\t\"\'\n\tTimeRange\022\r\n\005start\030\001 \001(\004\022\013\n\003end\030\002 "
    "\001(\004\"a\n\010Position\022\020\n\010latitude\030\001 \001(\002\022\021\n\tlon"
    "gitude\030\002 \001(\002\022\017\n\007bearing\030\003 \001(\002\022\020\n\010odomete"
    "r\030\004 \001(\001\022\r\n\005speed\030\005 \001(\002\"\230\002\n\016TripDescripto"
    "r\022\017\n\007trip_id\030\001 \001(\t\022\020\n\010route_id\030\005 \001(\t\022\024\n\014"
    "direction_id\030\006 \001(\r\022\022\n\nstart_time\030\002 \001(\t\022\022"
    "\n\nstart_date\030\003 \001(\t\022T\n\025schedule_relations"
    "hip\030\004 \001(\01625.transit_realtime.TripDescrip"
    "tor.ScheduleRelationship\"O\n\024ScheduleRela"
    "tionship\022\r\n\tSCHEDULED\020\000\022\t\n\005ADDED\020\001\022\017\n\013UN"
    "SCHEDULED\020\002\022\014\n\010CANCELED\020\003\"E\n\021VehicleDesc"
    "riptor\022\n\n\002id\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\025\n\rlic"
    "ense_plate\030\003 \001(\t\"\212\001\n\016EntitySelector\022\021\n\ta"
    "gency_id\030\001 \001(\t\022\020\n\010route_id\030\002 \001(\t\022\022\n\nrout"
    "e_type\030\003 \001(\005\022.\n\004trip\030\004 \001(\0132 .transit_rea"
    "ltime.TripDescriptor\022\017\n\007stop_id\030\005 \001(\t\"\206\001"
    "\n\020TranslatedString\022C\n\013translation\030\001 \003(\0132"
    "..transit_realtime.TranslatedString.Tran"
    "slation\032-\n\013Translation\022\014\n\004text\030\001 \001(\t\022\020\n\010"
    "language\030\002 \001(\tB\035\n\033com.google.transit.rea"
    "ltimeb\006proto3", 3653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gtfs-realtime.proto3", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gtfs_2drealtime_2eproto3);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_gtfs_2drealtime_2eproto3_once_);
void protobuf_AddDesc_gtfs_2drealtime_2eproto3() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_gtfs_2drealtime_2eproto3_once_,
                 &protobuf_AddDesc_gtfs_2drealtime_2eproto3_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gtfs_2drealtime_2eproto3 {
  StaticDescriptorInitializer_gtfs_2drealtime_2eproto3() {
    protobuf_AddDesc_gtfs_2drealtime_2eproto3();
  }
} static_descriptor_initializer_gtfs_2drealtime_2eproto3_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedMessage::kHeaderFieldNumber;
const int FeedMessage::kEntityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedMessage::FeedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.FeedMessage)
}

void FeedMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::transit_realtime::FeedHeader*>(
      ::transit_realtime::FeedHeader::internal_default_instance());
}

FeedMessage::FeedMessage(const FeedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedMessage)
}

void FeedMessage::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

FeedMessage::~FeedMessage() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedMessage)
  SharedDtor();
}

void FeedMessage::SharedDtor() {
  if (this != &FeedMessage_default_instance_.get()) {
    delete header_;
  }
}

void FeedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedMessage_descriptor_;
}

const FeedMessage& FeedMessage::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FeedMessage> FeedMessage_default_instance_;

FeedMessage* FeedMessage::New(::google::protobuf::Arena* arena) const {
  FeedMessage* n = new FeedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedMessage)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  entity_.Clear();
}

bool FeedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.FeedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .transit_realtime.FeedHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        break;
      }

      // repeated .transit_realtime.FeedEntity entity = 2;
      case 2: {
        if (tag == 18) {
         parse_entity:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_entity;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.FeedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.FeedMessage)
  return false;
#undef DO_
}

void FeedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.FeedMessage)
  // optional .transit_realtime.FeedHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  for (unsigned int i = 0, n = this->entity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity(i), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.FeedMessage)
}

::google::protobuf::uint8* FeedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedMessage)
  // optional .transit_realtime.FeedHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  for (unsigned int i = 0, n = this->entity_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entity(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedMessage)
  return target;
}

size_t FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedMessage)
  size_t total_size = 0;

  // optional .transit_realtime.FeedHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  {
    unsigned int count = this->entity_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.FeedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.FeedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.FeedMessage)
    UnsafeMergeFrom(*source);
  }
}

void FeedMessage::MergeFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FeedMessage::UnsafeMergeFrom(const FeedMessage& from) {
  GOOGLE_DCHECK(&from != this);
  entity_.MergeFrom(from.entity_);
  if (from.has_header()) {
    mutable_header()->::transit_realtime::FeedHeader::MergeFrom(from.header());
  }
}

void FeedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FeedMessage::IsInitialized() const {

  return true;
}

void FeedMessage::Swap(FeedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedMessage::InternalSwap(FeedMessage* other) {
  std::swap(header_, other->header_);
  entity_.UnsafeArenaSwap(&other->entity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedMessage_descriptor_;
  metadata.reflection = FeedMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedMessage

// optional .transit_realtime.FeedHeader header = 1;
bool FeedMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void FeedMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::transit_realtime::FeedHeader& FeedMessage::header() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedMessage.header)
  return header_ != NULL ? *header_
                         : *::transit_realtime::FeedHeader::internal_default_instance();
}
::transit_realtime::FeedHeader* FeedMessage::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::transit_realtime::FeedHeader;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedMessage.header)
  return header_;
}
::transit_realtime::FeedHeader* FeedMessage::release_header() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedMessage.header)
  
  ::transit_realtime::FeedHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void FeedMessage::set_allocated_header(::transit_realtime::FeedHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedMessage.header)
}

// repeated .transit_realtime.FeedEntity entity = 2;
int FeedMessage::entity_size() const {
  return entity_.size();
}
void FeedMessage::clear_entity() {
  entity_.Clear();
}
const ::transit_realtime::FeedEntity& FeedMessage::entity(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedMessage.entity)
  return entity_.Get(index);
}
::transit_realtime::FeedEntity* FeedMessage::mutable_entity(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedMessage.entity)
  return entity_.Mutable(index);
}
::transit_realtime::FeedEntity* FeedMessage::add_entity() {
  // @@protoc_insertion_point(field_add:transit_realtime.FeedMessage.entity)
  return entity_.Add();
}
::google::protobuf::RepeatedPtrField< ::transit_realtime::FeedEntity >*
FeedMessage::mutable_entity() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.FeedMessage.entity)
  return &entity_;
}
const ::google::protobuf::RepeatedPtrField< ::transit_realtime::FeedEntity >&
FeedMessage::entity() const {
  // @@protoc_insertion_point(field_list:transit_realtime.FeedMessage.entity)
  return entity_;
}

inline const FeedMessage* FeedMessage::internal_default_instance() {
  return &FeedMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* FeedHeader_Incrementality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedHeader_Incrementality_descriptor_;
}
bool FeedHeader_Incrementality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FeedHeader_Incrementality FeedHeader::FULL_DATASET;
const FeedHeader_Incrementality FeedHeader::DIFFERENTIAL;
const FeedHeader_Incrementality FeedHeader::Incrementality_MIN;
const FeedHeader_Incrementality FeedHeader::Incrementality_MAX;
const int FeedHeader::Incrementality_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedHeader::kGtfsRealtimeVersionFieldNumber;
const int FeedHeader::kIncrementalityFieldNumber;
const int FeedHeader::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedHeader::FeedHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.FeedHeader)
}

void FeedHeader::InitAsDefaultInstance() {
}

FeedHeader::FeedHeader(const FeedHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedHeader)
}

void FeedHeader::SharedCtor() {
  gtfs_realtime_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&incrementality_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(incrementality_));
  _cached_size_ = 0;
}

FeedHeader::~FeedHeader() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedHeader)
  SharedDtor();
}

void FeedHeader::SharedDtor() {
  gtfs_realtime_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeedHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedHeader_descriptor_;
}

const FeedHeader& FeedHeader::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FeedHeader> FeedHeader_default_instance_;

FeedHeader* FeedHeader::New(::google::protobuf::Arena* arena) const {
  FeedHeader* n = new FeedHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FeedHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FeedHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, incrementality_);
  gtfs_realtime_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.FeedHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gtfs_realtime_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtfs_realtime_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gtfs_realtime_version().data(), this->gtfs_realtime_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.FeedHeader.gtfs_realtime_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_incrementality;
        break;
      }

      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;
      case 2: {
        if (tag == 16) {
         parse_incrementality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_incrementality(static_cast< ::transit_realtime::FeedHeader_Incrementality >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.FeedHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.FeedHeader)
  return false;
#undef DO_
}

void FeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.FeedHeader)
  // optional string gtfs_realtime_version = 1;
  if (this->gtfs_realtime_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtfs_realtime_version().data(), this->gtfs_realtime_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.FeedHeader.gtfs_realtime_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gtfs_realtime_version(), output);
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;
  if (this->incrementality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->incrementality(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.FeedHeader)
}

::google::protobuf::uint8* FeedHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedHeader)
  // optional string gtfs_realtime_version = 1;
  if (this->gtfs_realtime_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtfs_realtime_version().data(), this->gtfs_realtime_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.FeedHeader.gtfs_realtime_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gtfs_realtime_version(), target);
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;
  if (this->incrementality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->incrementality(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedHeader)
  return target;
}

size_t FeedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedHeader)
  size_t total_size = 0;

  // optional string gtfs_realtime_version = 1;
  if (this->gtfs_realtime_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtfs_realtime_version());
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;
  if (this->incrementality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->incrementality());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.FeedHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeedHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.FeedHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.FeedHeader)
    UnsafeMergeFrom(*source);
  }
}

void FeedHeader::MergeFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FeedHeader::UnsafeMergeFrom(const FeedHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.gtfs_realtime_version().size() > 0) {

    gtfs_realtime_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtfs_realtime_version_);
  }
  if (from.incrementality() != 0) {
    set_incrementality(from.incrementality());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FeedHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.FeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedHeader::CopyFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FeedHeader::IsInitialized() const {

  return true;
}

void FeedHeader::Swap(FeedHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedHeader::InternalSwap(FeedHeader* other) {
  gtfs_realtime_version_.Swap(&other->gtfs_realtime_version_);
  std::swap(incrementality_, other->incrementality_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedHeader_descriptor_;
  metadata.reflection = FeedHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedHeader

// optional string gtfs_realtime_version = 1;
void FeedHeader::clear_gtfs_realtime_version() {
  gtfs_realtime_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FeedHeader::gtfs_realtime_version() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.gtfs_realtime_version)
  return gtfs_realtime_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeedHeader::set_gtfs_realtime_version(const ::std::string& value) {
  
  gtfs_realtime_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.gtfs_realtime_version)
}
void FeedHeader::set_gtfs_realtime_version(const char* value) {
  
  gtfs_realtime_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.FeedHeader.gtfs_realtime_version)
}
void FeedHeader::set_gtfs_realtime_version(const char* value, size_t size) {
  
  gtfs_realtime_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.FeedHeader.gtfs_realtime_version)
}
::std::string* FeedHeader::mutable_gtfs_realtime_version() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedHeader.gtfs_realtime_version)
  return gtfs_realtime_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeedHeader::release_gtfs_realtime_version() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedHeader.gtfs_realtime_version)
  
  return gtfs_realtime_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeedHeader::set_allocated_gtfs_realtime_version(::std::string* gtfs_realtime_version) {
  if (gtfs_realtime_version != NULL) {
    
  } else {
    
  }
  gtfs_realtime_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtfs_realtime_version);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedHeader.gtfs_realtime_version)
}

// optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;
void FeedHeader::clear_incrementality() {
  incrementality_ = 0;
}
::transit_realtime::FeedHeader_Incrementality FeedHeader::incrementality() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.incrementality)
  return static_cast< ::transit_realtime::FeedHeader_Incrementality >(incrementality_);
}
void FeedHeader::set_incrementality(::transit_realtime::FeedHeader_Incrementality value) {
  
  incrementality_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.incrementality)
}

// optional uint64 timestamp = 3;
void FeedHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FeedHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.timestamp)
  return timestamp_;
}
void FeedHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.timestamp)
}

inline const FeedHeader* FeedHeader::internal_default_instance() {
  return &FeedHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedEntity::kIdFieldNumber;
const int FeedEntity::kIsDeletedFieldNumber;
const int FeedEntity::kTripUpdateFieldNumber;
const int FeedEntity::kVehicleFieldNumber;
const int FeedEntity::kAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedEntity::FeedEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.FeedEntity)
}

void FeedEntity::InitAsDefaultInstance() {
  trip_update_ = const_cast< ::transit_realtime::TripUpdate*>(
      ::transit_realtime::TripUpdate::internal_default_instance());
  vehicle_ = const_cast< ::transit_realtime::VehiclePosition*>(
      ::transit_realtime::VehiclePosition::internal_default_instance());
  alert_ = const_cast< ::transit_realtime::Alert*>(
      ::transit_realtime::Alert::internal_default_instance());
}

FeedEntity::FeedEntity(const FeedEntity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedEntity)
}

void FeedEntity::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_update_ = NULL;
  vehicle_ = NULL;
  alert_ = NULL;
  is_deleted_ = false;
  _cached_size_ = 0;
}

FeedEntity::~FeedEntity() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedEntity)
  SharedDtor();
}

void FeedEntity::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &FeedEntity_default_instance_.get()) {
    delete trip_update_;
    delete vehicle_;
    delete alert_;
  }
}

void FeedEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedEntity_descriptor_;
}

const FeedEntity& FeedEntity::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FeedEntity> FeedEntity_default_instance_;

FeedEntity* FeedEntity::New(::google::protobuf::Arena* arena) const {
  FeedEntity* n = new FeedEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedEntity)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_deleted_ = false;
  if (GetArenaNoVirtual() == NULL && trip_update_ != NULL) delete trip_update_;
  trip_update_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
  if (GetArenaNoVirtual() == NULL && alert_ != NULL) delete alert_;
  alert_ = NULL;
}

bool FeedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.FeedEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.FeedEntity.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_deleted;
        break;
      }

      // optional bool is_deleted = 2;
      case 2: {
        if (tag == 16) {
         parse_is_deleted:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trip_update;
        break;
      }

      // optional .transit_realtime.TripUpdate trip_update = 3;
      case 3: {
        if (tag == 26) {
         parse_trip_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vehicle;
        break;
      }

      // optional .transit_realtime.VehiclePosition vehicle = 4;
      case 4: {
        if (tag == 34) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alert;
        break;
      }

      // optional .transit_realtime.Alert alert = 5;
      case 5: {
        if (tag == 42) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.FeedEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.FeedEntity)
  return false;
#undef DO_
}

void FeedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.FeedEntity)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.FeedEntity.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bool is_deleted = 2;
  if (this->is_deleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deleted(), output);
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (this->has_trip_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trip_update_, output);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (this->has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->vehicle_, output);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (this->has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->alert_, output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.FeedEntity)
}

::google::protobuf::uint8* FeedEntity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedEntity)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.FeedEntity.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool is_deleted = 2;
  if (this->is_deleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deleted(), target);
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (this->has_trip_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trip_update_, false, target);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (this->has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->vehicle_, false, target);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (this->has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->alert_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedEntity)
  return target;
}

size_t FeedEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedEntity)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional bool is_deleted = 2;
  if (this->is_deleted() != 0) {
    total_size += 1 + 1;
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (this->has_trip_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trip_update_);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (this->has_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (this->has_alert()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alert_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.FeedEntity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeedEntity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedEntity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.FeedEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.FeedEntity)
    UnsafeMergeFrom(*source);
  }
}

void FeedEntity::MergeFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedEntity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FeedEntity::UnsafeMergeFrom(const FeedEntity& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.is_deleted() != 0) {
    set_is_deleted(from.is_deleted());
  }
  if (from.has_trip_update()) {
    mutable_trip_update()->::transit_realtime::TripUpdate::MergeFrom(from.trip_update());
  }
  if (from.has_vehicle()) {
    mutable_vehicle()->::transit_realtime::VehiclePosition::MergeFrom(from.vehicle());
  }
  if (from.has_alert()) {
    mutable_alert()->::transit_realtime::Alert::MergeFrom(from.alert());
  }
}

void FeedEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.FeedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedEntity::CopyFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedEntity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FeedEntity::IsInitialized() const {

  return true;
}

void FeedEntity::Swap(FeedEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedEntity::InternalSwap(FeedEntity* other) {
  id_.Swap(&other->id_);
  std::swap(is_deleted_, other->is_deleted_);
  std::swap(trip_update_, other->trip_update_);
  std::swap(vehicle_, other->vehicle_);
  std::swap(alert_, other->alert_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedEntity_descriptor_;
  metadata.reflection = FeedEntity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedEntity

// optional string id = 1;
void FeedEntity::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FeedEntity::id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeedEntity::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedEntity.id)
}
void FeedEntity::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.FeedEntity.id)
}
void FeedEntity::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.FeedEntity.id)
}
::std::string* FeedEntity::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeedEntity::release_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeedEntity::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.id)
}

// optional bool is_deleted = 2;
void FeedEntity::clear_is_deleted() {
  is_deleted_ = false;
}
bool FeedEntity::is_deleted() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.is_deleted)
  return is_deleted_;
}
void FeedEntity::set_is_deleted(bool value) {
  
  is_deleted_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.FeedEntity.is_deleted)
}

// optional .transit_realtime.TripUpdate trip_update = 3;
bool FeedEntity::has_trip_update() const {
  return this != internal_default_instance() && trip_update_ != NULL;
}
void FeedEntity::clear_trip_update() {
  if (GetArenaNoVirtual() == NULL && trip_update_ != NULL) delete trip_update_;
  trip_update_ = NULL;
}
const ::transit_realtime::TripUpdate& FeedEntity::trip_update() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.trip_update)
  return trip_update_ != NULL ? *trip_update_
                         : *::transit_realtime::TripUpdate::internal_default_instance();
}
::transit_realtime::TripUpdate* FeedEntity::mutable_trip_update() {
  
  if (trip_update_ == NULL) {
    trip_update_ = new ::transit_realtime::TripUpdate;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.trip_update)
  return trip_update_;
}
::transit_realtime::TripUpdate* FeedEntity::release_trip_update() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.trip_update)
  
  ::transit_realtime::TripUpdate* temp = trip_update_;
  trip_update_ = NULL;
  return temp;
}
void FeedEntity::set_allocated_trip_update(::transit_realtime::TripUpdate* trip_update) {
  delete trip_update_;
  trip_update_ = trip_update;
  if (trip_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.trip_update)
}

// optional .transit_realtime.VehiclePosition vehicle = 4;
bool FeedEntity::has_vehicle() const {
  return this != internal_default_instance() && vehicle_ != NULL;
}
void FeedEntity::clear_vehicle() {
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
}
const ::transit_realtime::VehiclePosition& FeedEntity::vehicle() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.vehicle)
  return vehicle_ != NULL ? *vehicle_
                         : *::transit_realtime::VehiclePosition::internal_default_instance();
}
::transit_realtime::VehiclePosition* FeedEntity::mutable_vehicle() {
  
  if (vehicle_ == NULL) {
    vehicle_ = new ::transit_realtime::VehiclePosition;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.vehicle)
  return vehicle_;
}
::transit_realtime::VehiclePosition* FeedEntity::release_vehicle() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.vehicle)
  
  ::transit_realtime::VehiclePosition* temp = vehicle_;
  vehicle_ = NULL;
  return temp;
}
void FeedEntity::set_allocated_vehicle(::transit_realtime::VehiclePosition* vehicle) {
  delete vehicle_;
  vehicle_ = vehicle;
  if (vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.vehicle)
}

// optional .transit_realtime.Alert alert = 5;
bool FeedEntity::has_alert() const {
  return this != internal_default_instance() && alert_ != NULL;
}
void FeedEntity::clear_alert() {
  if (GetArenaNoVirtual() == NULL && alert_ != NULL) delete alert_;
  alert_ = NULL;
}
const ::transit_realtime::Alert& FeedEntity::alert() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.alert)
  return alert_ != NULL ? *alert_
                         : *::transit_realtime::Alert::internal_default_instance();
}
::transit_realtime::Alert* FeedEntity::mutable_alert() {
  
  if (alert_ == NULL) {
    alert_ = new ::transit_realtime::Alert;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.alert)
  return alert_;
}
::transit_realtime::Alert* FeedEntity::release_alert() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.alert)
  
  ::transit_realtime::Alert* temp = alert_;
  alert_ = NULL;
  return temp;
}
void FeedEntity::set_allocated_alert(::transit_realtime::Alert* alert) {
  delete alert_;
  alert_ = alert;
  if (alert) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.alert)
}

inline const FeedEntity* FeedEntity::internal_default_instance() {
  return &FeedEntity_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate_StopTimeEvent::kDelayFieldNumber;
const int TripUpdate_StopTimeEvent::kTimeFieldNumber;
const int TripUpdate_StopTimeEvent::kUncertaintyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate.StopTimeEvent)
}

void TripUpdate_StopTimeEvent::InitAsDefaultInstance() {
}

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeEvent)
}

void TripUpdate_StopTimeEvent::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&uncertainty_) -
    reinterpret_cast<char*>(&time_) + sizeof(uncertainty_));
  _cached_size_ = 0;
}

TripUpdate_StopTimeEvent::~TripUpdate_StopTimeEvent() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeEvent)
  SharedDtor();
}

void TripUpdate_StopTimeEvent::SharedDtor() {
}

void TripUpdate_StopTimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripUpdate_StopTimeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_StopTimeEvent_descriptor_;
}

const TripUpdate_StopTimeEvent& TripUpdate_StopTimeEvent::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TripUpdate_StopTimeEvent> TripUpdate_StopTimeEvent_default_instance_;

TripUpdate_StopTimeEvent* TripUpdate_StopTimeEvent::New(::google::protobuf::Arena* arena) const {
  TripUpdate_StopTimeEvent* n = new TripUpdate_StopTimeEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripUpdate_StopTimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TripUpdate_StopTimeEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TripUpdate_StopTimeEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, uncertainty_);

#undef ZR_HELPER_
#undef ZR_

}

bool TripUpdate_StopTimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate.StopTimeEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uncertainty;
        break;
      }

      // optional int32 uncertainty = 3;
      case 3: {
        if (tag == 24) {
         parse_uncertainty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uncertainty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate.StopTimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate.StopTimeEvent)
  return false;
#undef DO_
}

void TripUpdate_StopTimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate.StopTimeEvent)
  // optional int32 delay = 1;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int32 uncertainty = 3;
  if (this->uncertainty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uncertainty(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate.StopTimeEvent)
}

::google::protobuf::uint8* TripUpdate_StopTimeEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeEvent)
  // optional int32 delay = 1;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional int32 uncertainty = 3;
  if (this->uncertainty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uncertainty(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeEvent)
  return target;
}

size_t TripUpdate_StopTimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeEvent)
  size_t total_size = 0;

  // optional int32 delay = 1;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 uncertainty = 3;
  if (this->uncertainty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uncertainty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate_StopTimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TripUpdate_StopTimeEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripUpdate_StopTimeEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate.StopTimeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate.StopTimeEvent)
    UnsafeMergeFrom(*source);
  }
}

void TripUpdate_StopTimeEvent::MergeFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TripUpdate_StopTimeEvent::UnsafeMergeFrom(const TripUpdate_StopTimeEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.uncertainty() != 0) {
    set_uncertainty(from.uncertainty());
  }
}

void TripUpdate_StopTimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_StopTimeEvent::CopyFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TripUpdate_StopTimeEvent::IsInitialized() const {

  return true;
}

void TripUpdate_StopTimeEvent::Swap(TripUpdate_StopTimeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate_StopTimeEvent::InternalSwap(TripUpdate_StopTimeEvent* other) {
  std::swap(delay_, other->delay_);
  std::swap(time_, other->time_);
  std::swap(uncertainty_, other->uncertainty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripUpdate_StopTimeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripUpdate_StopTimeEvent_descriptor_;
  metadata.reflection = TripUpdate_StopTimeEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor_;
}
bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SCHEDULED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SKIPPED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::NO_DATA;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MIN;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MAX;
const int TripUpdate_StopTimeUpdate::ScheduleRelationship_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate_StopTimeUpdate::kStopSequenceFieldNumber;
const int TripUpdate_StopTimeUpdate::kStopIdFieldNumber;
const int TripUpdate_StopTimeUpdate::kArrivalFieldNumber;
const int TripUpdate_StopTimeUpdate::kDepartureFieldNumber;
const int TripUpdate_StopTimeUpdate::kScheduleRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate.StopTimeUpdate)
}

void TripUpdate_StopTimeUpdate::InitAsDefaultInstance() {
  arrival_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(
      ::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance());
  departure_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(
      ::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance());
}

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeUpdate)
}

void TripUpdate_StopTimeUpdate::SharedCtor() {
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arrival_ = NULL;
  departure_ = NULL;
  ::memset(&stop_sequence_, 0, reinterpret_cast<char*>(&schedule_relationship_) -
    reinterpret_cast<char*>(&stop_sequence_) + sizeof(schedule_relationship_));
  _cached_size_ = 0;
}

TripUpdate_StopTimeUpdate::~TripUpdate_StopTimeUpdate() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeUpdate)
  SharedDtor();
}

void TripUpdate_StopTimeUpdate::SharedDtor() {
  stop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TripUpdate_StopTimeUpdate_default_instance_.get()) {
    delete arrival_;
    delete departure_;
  }
}

void TripUpdate_StopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripUpdate_StopTimeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_StopTimeUpdate_descriptor_;
}

const TripUpdate_StopTimeUpdate& TripUpdate_StopTimeUpdate::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TripUpdate_StopTimeUpdate> TripUpdate_StopTimeUpdate_default_instance_;

TripUpdate_StopTimeUpdate* TripUpdate_StopTimeUpdate::New(::google::protobuf::Arena* arena) const {
  TripUpdate_StopTimeUpdate* n = new TripUpdate_StopTimeUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripUpdate_StopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TripUpdate_StopTimeUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TripUpdate_StopTimeUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stop_sequence_, schedule_relationship_);
  stop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && arrival_ != NULL) delete arrival_;
  arrival_ = NULL;
  if (GetArenaNoVirtual() == NULL && departure_ != NULL) delete departure_;
  departure_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TripUpdate_StopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate.StopTimeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stop_sequence = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arrival;
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
      case 2: {
        if (tag == 18) {
         parse_arrival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrival()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_departure;
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
      case 3: {
        if (tag == 26) {
         parse_departure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_departure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stop_id;
        break;
      }

      // optional string stop_id = 4;
      case 4: {
        if (tag == 34) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stop_id().data(), this->stop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TripUpdate.StopTimeUpdate.stop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_schedule_relationship;
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
      case 5: {
        if (tag == 40) {
         parse_schedule_relationship:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_schedule_relationship(static_cast< ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate.StopTimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate.StopTimeUpdate)
  return false;
#undef DO_
}

void TripUpdate_StopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate.StopTimeUpdate)
  // optional uint32 stop_sequence = 1;
  if (this->stop_sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stop_sequence(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (this->has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->arrival_, output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (this->has_departure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->departure_, output);
  }

  // optional string stop_id = 4;
  if (this->stop_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stop_id(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
  if (this->schedule_relationship() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->schedule_relationship(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate.StopTimeUpdate)
}

::google::protobuf::uint8* TripUpdate_StopTimeUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeUpdate)
  // optional uint32 stop_sequence = 1;
  if (this->stop_sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stop_sequence(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (this->has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->arrival_, false, target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (this->has_departure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->departure_, false, target);
  }

  // optional string stop_id = 4;
  if (this->stop_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stop_id(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
  if (this->schedule_relationship() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->schedule_relationship(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeUpdate)
  return target;
}

size_t TripUpdate_StopTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeUpdate)
  size_t total_size = 0;

  // optional uint32 stop_sequence = 1;
  if (this->stop_sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_sequence());
  }

  // optional string stop_id = 4;
  if (this->stop_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stop_id());
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (this->has_arrival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->arrival_);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (this->has_departure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->departure_);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
  if (this->schedule_relationship() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate_StopTimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TripUpdate_StopTimeUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripUpdate_StopTimeUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate.StopTimeUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate.StopTimeUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TripUpdate_StopTimeUpdate::MergeFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TripUpdate_StopTimeUpdate::UnsafeMergeFrom(const TripUpdate_StopTimeUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.stop_sequence() != 0) {
    set_stop_sequence(from.stop_sequence());
  }
  if (from.stop_id().size() > 0) {

    stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
  }
  if (from.has_arrival()) {
    mutable_arrival()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.arrival());
  }
  if (from.has_departure()) {
    mutable_departure()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.departure());
  }
  if (from.schedule_relationship() != 0) {
    set_schedule_relationship(from.schedule_relationship());
  }
}

void TripUpdate_StopTimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_StopTimeUpdate::CopyFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TripUpdate_StopTimeUpdate::IsInitialized() const {

  return true;
}

void TripUpdate_StopTimeUpdate::Swap(TripUpdate_StopTimeUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate_StopTimeUpdate::InternalSwap(TripUpdate_StopTimeUpdate* other) {
  std::swap(stop_sequence_, other->stop_sequence_);
  stop_id_.Swap(&other->stop_id_);
  std::swap(arrival_, other->arrival_);
  std::swap(departure_, other->departure_);
  std::swap(schedule_relationship_, other->schedule_relationship_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripUpdate_StopTimeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripUpdate_StopTimeUpdate_descriptor_;
  metadata.reflection = TripUpdate_StopTimeUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate::kTripFieldNumber;
const int TripUpdate::kVehicleFieldNumber;
const int TripUpdate::kStopTimeUpdateFieldNumber;
const int TripUpdate::kTimestampFieldNumber;
const int TripUpdate::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate::TripUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate)
}

void TripUpdate::InitAsDefaultInstance() {
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(
      ::transit_realtime::VehicleDescriptor::internal_default_instance());
}

TripUpdate::TripUpdate(const TripUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate)
}

void TripUpdate::SharedCtor() {
  trip_ = NULL;
  vehicle_ = NULL;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(delay_));
  _cached_size_ = 0;
}

TripUpdate::~TripUpdate() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate)
  SharedDtor();
}

void TripUpdate::SharedDtor() {
  if (this != &TripUpdate_default_instance_.get()) {
    delete trip_;
    delete vehicle_;
  }
}

void TripUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_descriptor_;
}

const TripUpdate& TripUpdate::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TripUpdate> TripUpdate_default_instance_;

TripUpdate* TripUpdate::New(::google::protobuf::Arena* arena) const {
  TripUpdate* n = new TripUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TripUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TripUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, delay_);
  if (GetArenaNoVirtual() == NULL && trip_ != NULL) delete trip_;
  trip_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  stop_time_update_.Clear();
}

bool TripUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop_time_update;
        break;
      }

      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2: {
        if (tag == 18) {
         parse_stop_time_update:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_time_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_time_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stop_time_update;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_vehicle;
        break;
      }

      // optional .transit_realtime.VehicleDescriptor vehicle = 3;
      case 3: {
        if (tag == 26) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delay;
        break;
      }

      // optional int32 delay = 5;
      case 5: {
        if (tag == 40) {
         parse_delay:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate)
  return false;
#undef DO_
}

void TripUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate)
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (this->has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trip_, output);
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (unsigned int i = 0, n = this->stop_time_update_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stop_time_update(i), output);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (this->has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vehicle_, output);
  }

  // optional uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional int32 delay = 5;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delay(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate)
}

::google::protobuf::uint8* TripUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate)
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (this->has_trip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trip_, false, target);
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (unsigned int i = 0, n = this->stop_time_update_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stop_time_update(i), false, target);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (this->has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vehicle_, false, target);
  }

  // optional uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional int32 delay = 5;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delay(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate)
  return target;
}

size_t TripUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate)
  size_t total_size = 0;

  // optional .transit_realtime.TripDescriptor trip = 1;
  if (this->has_trip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trip_);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (this->has_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_);
  }

  // optional uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional int32 delay = 5;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  {
    unsigned int count = this->stop_time_update_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_time_update(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TripUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TripUpdate::MergeFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TripUpdate::UnsafeMergeFrom(const TripUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  stop_time_update_.MergeFrom(from.stop_time_update_);
  if (from.has_trip()) {
    mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
  }
  if (from.has_vehicle()) {
    mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
}

void TripUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate::CopyFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TripUpdate::IsInitialized() const {

  return true;
}

void TripUpdate::Swap(TripUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate::InternalSwap(TripUpdate* other) {
  std::swap(trip_, other->trip_);
  std::swap(vehicle_, other->vehicle_);
  stop_time_update_.UnsafeArenaSwap(&other->stop_time_update_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(delay_, other->delay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripUpdate_descriptor_;
  metadata.reflection = TripUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripUpdate_StopTimeEvent

// optional int32 delay = 1;
void TripUpdate_StopTimeEvent::clear_delay() {
  delay_ = 0;
}
::google::protobuf::int32 TripUpdate_StopTimeEvent::delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.delay)
  return delay_;
}
void TripUpdate_StopTimeEvent::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.delay)
}

// optional int64 time = 2;
void TripUpdate_StopTimeEvent::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TripUpdate_StopTimeEvent::time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.time)
  return time_;
}
void TripUpdate_StopTimeEvent::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.time)
}

// optional int32 uncertainty = 3;
void TripUpdate_StopTimeEvent::clear_uncertainty() {
  uncertainty_ = 0;
}
::google::protobuf::int32 TripUpdate_StopTimeEvent::uncertainty() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.uncertainty)
  return uncertainty_;
}
void TripUpdate_StopTimeEvent::set_uncertainty(::google::protobuf::int32 value) {
  
  uncertainty_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.uncertainty)
}

inline const TripUpdate_StopTimeEvent* TripUpdate_StopTimeEvent::internal_default_instance() {
  return &TripUpdate_StopTimeEvent_default_instance_.get();
}
// -------------------------------------------------------------------

// TripUpdate_StopTimeUpdate

// optional uint32 stop_sequence = 1;
void TripUpdate_StopTimeUpdate::clear_stop_sequence() {
  stop_sequence_ = 0u;
}
::google::protobuf::uint32 TripUpdate_StopTimeUpdate::stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_sequence)
  return stop_sequence_;
}
void TripUpdate_StopTimeUpdate::set_stop_sequence(::google::protobuf::uint32 value) {
  
  stop_sequence_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.stop_sequence)
}

// optional string stop_id = 4;
void TripUpdate_StopTimeUpdate::clear_stop_id() {
  stop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TripUpdate_StopTimeUpdate::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return stop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripUpdate_StopTimeUpdate::set_stop_id(const ::std::string& value) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
void TripUpdate_StopTimeUpdate::set_stop_id(const char* value) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
void TripUpdate_StopTimeUpdate::set_stop_id(const char* value, size_t size) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
::std::string* TripUpdate_StopTimeUpdate::mutable_stop_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return stop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripUpdate_StopTimeUpdate::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  
  return stop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripUpdate_StopTimeUpdate::set_allocated_stop_id(::std::string* stop_id) {
  if (stop_id != NULL) {
    
  } else {
    
  }
  stop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}

// optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
bool TripUpdate_StopTimeUpdate::has_arrival() const {
  return this != internal_default_instance() && arrival_ != NULL;
}
void TripUpdate_StopTimeUpdate::clear_arrival() {
  if (GetArenaNoVirtual() == NULL && arrival_ != NULL) delete arrival_;
  arrival_ = NULL;
}
const ::transit_realtime::TripUpdate_StopTimeEvent& TripUpdate_StopTimeUpdate::arrival() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  return arrival_ != NULL ? *arrival_
                         : *::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance();
}
::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::mutable_arrival() {
  
  if (arrival_ == NULL) {
    arrival_ = new ::transit_realtime::TripUpdate_StopTimeEvent;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  return arrival_;
}
::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::release_arrival() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  
  ::transit_realtime::TripUpdate_StopTimeEvent* temp = arrival_;
  arrival_ = NULL;
  return temp;
}
void TripUpdate_StopTimeUpdate::set_allocated_arrival(::transit_realtime::TripUpdate_StopTimeEvent* arrival) {
  delete arrival_;
  arrival_ = arrival;
  if (arrival) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
}

// optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
bool TripUpdate_StopTimeUpdate::has_departure() const {
  return this != internal_default_instance() && departure_ != NULL;
}
void TripUpdate_StopTimeUpdate::clear_departure() {
  if (GetArenaNoVirtual() == NULL && departure_ != NULL) delete departure_;
  departure_ = NULL;
}
const ::transit_realtime::TripUpdate_StopTimeEvent& TripUpdate_StopTimeUpdate::departure() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  return departure_ != NULL ? *departure_
                         : *::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance();
}
::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::mutable_departure() {
  
  if (departure_ == NULL) {
    departure_ = new ::transit_realtime::TripUpdate_StopTimeEvent;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  return departure_;
}
::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::release_departure() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  
  ::transit_realtime::TripUpdate_StopTimeEvent* temp = departure_;
  departure_ = NULL;
  return temp;
}
void TripUpdate_StopTimeUpdate::set_allocated_departure(::transit_realtime::TripUpdate_StopTimeEvent* departure) {
  delete departure_;
  departure_ = departure;
  if (departure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.departure)
}

// optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
void TripUpdate_StopTimeUpdate::clear_schedule_relationship() {
  schedule_relationship_ = 0;
}
::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::schedule_relationship() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship)
  return static_cast< ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship >(schedule_relationship_);
}
void TripUpdate_StopTimeUpdate::set_schedule_relationship(::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value) {
  
  schedule_relationship_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship)
}

inline const TripUpdate_StopTimeUpdate* TripUpdate_StopTimeUpdate::internal_default_instance() {
  return &TripUpdate_StopTimeUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TripUpdate

// optional .transit_realtime.TripDescriptor trip = 1;
bool TripUpdate::has_trip() const {
  return this != internal_default_instance() && trip_ != NULL;
}
void TripUpdate::clear_trip() {
  if (GetArenaNoVirtual() == NULL && trip_ != NULL) delete trip_;
  trip_ = NULL;
}
const ::transit_realtime::TripDescriptor& TripUpdate::trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.trip)
  return trip_ != NULL ? *trip_
                         : *::transit_realtime::TripDescriptor::internal_default_instance();
}
::transit_realtime::TripDescriptor* TripUpdate::mutable_trip() {
  
  if (trip_ == NULL) {
    trip_ = new ::transit_realtime::TripDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.trip)
  return trip_;
}
::transit_realtime::TripDescriptor* TripUpdate::release_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.trip)
  
  ::transit_realtime::TripDescriptor* temp = trip_;
  trip_ = NULL;
  return temp;
}
void TripUpdate::set_allocated_trip(::transit_realtime::TripDescriptor* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.trip)
}

// optional .transit_realtime.VehicleDescriptor vehicle = 3;
bool TripUpdate::has_vehicle() const {
  return this != internal_default_instance() && vehicle_ != NULL;
}
void TripUpdate::clear_vehicle() {
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
}
const ::transit_realtime::VehicleDescriptor& TripUpdate::vehicle() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.vehicle)
  return vehicle_ != NULL ? *vehicle_
                         : *::transit_realtime::VehicleDescriptor::internal_default_instance();
}
::transit_realtime::VehicleDescriptor* TripUpdate::mutable_vehicle() {
  
  if (vehicle_ == NULL) {
    vehicle_ = new ::transit_realtime::VehicleDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.vehicle)
  return vehicle_;
}
::transit_realtime::VehicleDescriptor* TripUpdate::release_vehicle() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.vehicle)
  
  ::transit_realtime::VehicleDescriptor* temp = vehicle_;
  vehicle_ = NULL;
  return temp;
}
void TripUpdate::set_allocated_vehicle(::transit_realtime::VehicleDescriptor* vehicle) {
  delete vehicle_;
  vehicle_ = vehicle;
  if (vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.vehicle)
}

// repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
int TripUpdate::stop_time_update_size() const {
  return stop_time_update_.size();
}
void TripUpdate::clear_stop_time_update() {
  stop_time_update_.Clear();
}
const ::transit_realtime::TripUpdate_StopTimeUpdate& TripUpdate::stop_time_update(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.stop_time_update)
  return stop_time_update_.Get(index);
}
::transit_realtime::TripUpdate_StopTimeUpdate* TripUpdate::mutable_stop_time_update(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.stop_time_update)
  return stop_time_update_.Mutable(index);
}
::transit_realtime::TripUpdate_StopTimeUpdate* TripUpdate::add_stop_time_update() {
  // @@protoc_insertion_point(field_add:transit_realtime.TripUpdate.stop_time_update)
  return stop_time_update_.Add();
}
::google::protobuf::RepeatedPtrField< ::transit_realtime::TripUpdate_StopTimeUpdate >*
TripUpdate::mutable_stop_time_update() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripUpdate.stop_time_update)
  return &stop_time_update_;
}
const ::google::protobuf::RepeatedPtrField< ::transit_realtime::TripUpdate_StopTimeUpdate >&
TripUpdate::stop_time_update() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripUpdate.stop_time_update)
  return stop_time_update_;
}

// optional uint64 timestamp = 4;
void TripUpdate::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TripUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.timestamp)
  return timestamp_;
}
void TripUpdate::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.timestamp)
}

// optional int32 delay = 5;
void TripUpdate::clear_delay() {
  delay_ = 0;
}
::google::protobuf::int32 TripUpdate::delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.delay)
  return delay_;
}
void TripUpdate::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.delay)
}

inline const TripUpdate* TripUpdate::internal_default_instance() {
  return &TripUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_VehicleStopStatus_descriptor_;
}
bool VehiclePosition_VehicleStopStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePosition_VehicleStopStatus VehiclePosition::INCOMING_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::STOPPED_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::IN_TRANSIT_TO;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MIN;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MAX;
const int VehiclePosition::VehicleStopStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_CongestionLevel_descriptor_;
}
bool VehiclePosition_CongestionLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePosition_CongestionLevel VehiclePosition::UNKNOWN_CONGESTION_LEVEL;
const VehiclePosition_CongestionLevel VehiclePosition::RUNNING_SMOOTHLY;
const VehiclePosition_CongestionLevel VehiclePosition::STOP_AND_GO;
const VehiclePosition_CongestionLevel VehiclePosition::CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::SEVERE_CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MIN;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MAX;
const int VehiclePosition::CongestionLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehiclePosition_OccupancyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_OccupancyStatus_descriptor_;
}
bool VehiclePosition_OccupancyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePosition_OccupancyStatus VehiclePosition::EMPTY;
const VehiclePosition_OccupancyStatus VehiclePosition::MANY_SEATS_AVAILABLE;
const VehiclePosition_OccupancyStatus VehiclePosition::FEW_SEATS_AVAILABLE;
const VehiclePosition_OccupancyStatus VehiclePosition::STANDING_ROOM_ONLY;
const VehiclePosition_OccupancyStatus VehiclePosition::CRUSHED_STANDING_ROOM_ONLY;
const VehiclePosition_OccupancyStatus VehiclePosition::FULL;
const VehiclePosition_OccupancyStatus VehiclePosition::NOT_ACCEPTING_PASSENGERS;
const VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MIN;
const VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MAX;
const int VehiclePosition::OccupancyStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePosition::kTripFieldNumber;
const int VehiclePosition::kVehicleFieldNumber;
const int VehiclePosition::kPositionFieldNumber;
const int VehiclePosition::kCurrentStopSequenceFieldNumber;
const int VehiclePosition::kStopIdFieldNumber;
const int VehiclePosition::kCurrentStatusFieldNumber;
const int VehiclePosition::kTimestampFieldNumber;
const int VehiclePosition::kCongestionLevelFieldNumber;
const int VehiclePosition::kOccupancyStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePosition::VehiclePosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.VehiclePosition)
}

void VehiclePosition::InitAsDefaultInstance() {
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(
      ::transit_realtime::VehicleDescriptor::internal_default_instance());
  position_ = const_cast< ::transit_realtime::Position*>(
      ::transit_realtime::Position::internal_default_instance());
}

VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehiclePosition)
}

void VehiclePosition::SharedCtor() {
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_ = NULL;
  vehicle_ = NULL;
  position_ = NULL;
  ::memset(&current_stop_sequence_, 0, reinterpret_cast<char*>(&occupancy_status_) -
    reinterpret_cast<char*>(&current_stop_sequence_) + sizeof(occupancy_status_));
  _cached_size_ = 0;
}

VehiclePosition::~VehiclePosition() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehiclePosition)
  SharedDtor();
}

void VehiclePosition::SharedDtor() {
  stop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &VehiclePosition_default_instance_.get()) {
    delete trip_;
    delete vehicle_;
    delete position_;
  }
}

void VehiclePosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehiclePosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_descriptor_;
}

const VehiclePosition& VehiclePosition::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VehiclePosition> VehiclePosition_default_instance_;

VehiclePosition* VehiclePosition::New(::google::protobuf::Arena* arena) const {
  VehiclePosition* n = new VehiclePosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehiclePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehiclePosition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehiclePosition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehiclePosition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(current_stop_sequence_, congestion_level_);
  if (GetArenaNoVirtual() == NULL && trip_ != NULL) delete trip_;
  trip_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  stop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  occupancy_status_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool VehiclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.VehiclePosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .transit_realtime.Position position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_stop_sequence;
        break;
      }

      // optional uint32 current_stop_sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_current_stop_sequence:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_stop_sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_current_status;
        break;
      }

      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
      case 4: {
        if (tag == 32) {
         parse_current_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_status(static_cast< ::transit_realtime::VehiclePosition_VehicleStopStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_congestion_level;
        break;
      }

      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6: {
        if (tag == 48) {
         parse_congestion_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_congestion_level(static_cast< ::transit_realtime::VehiclePosition_CongestionLevel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stop_id;
        break;
      }

      // optional string stop_id = 7;
      case 7: {
        if (tag == 58) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stop_id().data(), this->stop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.VehiclePosition.stop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vehicle;
        break;
      }

      // optional .transit_realtime.VehicleDescriptor vehicle = 8;
      case 8: {
        if (tag == 66) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_occupancy_status;
        break;
      }

      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
      case 9: {
        if (tag == 72) {
         parse_occupancy_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_occupancy_status(static_cast< ::transit_realtime::VehiclePosition_OccupancyStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.VehiclePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.VehiclePosition)
  return false;
#undef DO_
}

void VehiclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.VehiclePosition)
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (this->has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trip_, output);
  }

  // optional .transit_realtime.Position position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional uint32 current_stop_sequence = 3;
  if (this->current_stop_sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_stop_sequence(), output);
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
  if (this->current_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->current_status(), output);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (this->congestion_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->congestion_level(), output);
  }

  // optional string stop_id = 7;
  if (this->stop_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehiclePosition.stop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->stop_id(), output);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (this->has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->vehicle_, output);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (this->occupancy_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->occupancy_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.VehiclePosition)
}

::google::protobuf::uint8* VehiclePosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehiclePosition)
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (this->has_trip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trip_, false, target);
  }

  // optional .transit_realtime.Position position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional uint32 current_stop_sequence = 3;
  if (this->current_stop_sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_stop_sequence(), target);
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
  if (this->current_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->current_status(), target);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (this->congestion_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->congestion_level(), target);
  }

  // optional string stop_id = 7;
  if (this->stop_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehiclePosition.stop_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stop_id(), target);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (this->has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->vehicle_, false, target);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (this->occupancy_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->occupancy_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehiclePosition)
  return target;
}

size_t VehiclePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehiclePosition)
  size_t total_size = 0;

  // optional .transit_realtime.TripDescriptor trip = 1;
  if (this->has_trip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trip_);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (this->has_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_);
  }

  // optional .transit_realtime.Position position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional uint32 current_stop_sequence = 3;
  if (this->current_stop_sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_stop_sequence());
  }

  // optional string stop_id = 7;
  if (this->stop_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stop_id());
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
  if (this->current_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_status());
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (this->congestion_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->congestion_level());
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (this->occupancy_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->occupancy_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehiclePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.VehiclePosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehiclePosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehiclePosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.VehiclePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.VehiclePosition)
    UnsafeMergeFrom(*source);
  }
}

void VehiclePosition::MergeFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehiclePosition)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VehiclePosition::UnsafeMergeFrom(const VehiclePosition& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_trip()) {
    mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
  }
  if (from.has_vehicle()) {
    mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
  }
  if (from.has_position()) {
    mutable_position()->::transit_realtime::Position::MergeFrom(from.position());
  }
  if (from.current_stop_sequence() != 0) {
    set_current_stop_sequence(from.current_stop_sequence());
  }
  if (from.stop_id().size() > 0) {

    stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
  }
  if (from.current_status() != 0) {
    set_current_status(from.current_status());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.congestion_level() != 0) {
    set_congestion_level(from.congestion_level());
  }
  if (from.occupancy_status() != 0) {
    set_occupancy_status(from.occupancy_status());
  }
}

void VehiclePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.VehiclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehiclePosition)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {

  return true;
}

void VehiclePosition::Swap(VehiclePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehiclePosition::InternalSwap(VehiclePosition* other) {
  std::swap(trip_, other->trip_);
  std::swap(vehicle_, other->vehicle_);
  std::swap(position_, other->position_);
  std::swap(current_stop_sequence_, other->current_stop_sequence_);
  stop_id_.Swap(&other->stop_id_);
  std::swap(current_status_, other->current_status_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(congestion_level_, other->congestion_level_);
  std::swap(occupancy_status_, other->occupancy_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehiclePosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehiclePosition_descriptor_;
  metadata.reflection = VehiclePosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehiclePosition

// optional .transit_realtime.TripDescriptor trip = 1;
bool VehiclePosition::has_trip() const {
  return this != internal_default_instance() && trip_ != NULL;
}
void VehiclePosition::clear_trip() {
  if (GetArenaNoVirtual() == NULL && trip_ != NULL) delete trip_;
  trip_ = NULL;
}
const ::transit_realtime::TripDescriptor& VehiclePosition::trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.trip)
  return trip_ != NULL ? *trip_
                         : *::transit_realtime::TripDescriptor::internal_default_instance();
}
::transit_realtime::TripDescriptor* VehiclePosition::mutable_trip() {
  
  if (trip_ == NULL) {
    trip_ = new ::transit_realtime::TripDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.trip)
  return trip_;
}
::transit_realtime::TripDescriptor* VehiclePosition::release_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.trip)
  
  ::transit_realtime::TripDescriptor* temp = trip_;
  trip_ = NULL;
  return temp;
}
void VehiclePosition::set_allocated_trip(::transit_realtime::TripDescriptor* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.trip)
}

// optional .transit_realtime.VehicleDescriptor vehicle = 8;
bool VehiclePosition::has_vehicle() const {
  return this != internal_default_instance() && vehicle_ != NULL;
}
void VehiclePosition::clear_vehicle() {
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
}
const ::transit_realtime::VehicleDescriptor& VehiclePosition::vehicle() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.vehicle)
  return vehicle_ != NULL ? *vehicle_
                         : *::transit_realtime::VehicleDescriptor::internal_default_instance();
}
::transit_realtime::VehicleDescriptor* VehiclePosition::mutable_vehicle() {
  
  if (vehicle_ == NULL) {
    vehicle_ = new ::transit_realtime::VehicleDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.vehicle)
  return vehicle_;
}
::transit_realtime::VehicleDescriptor* VehiclePosition::release_vehicle() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.vehicle)
  
  ::transit_realtime::VehicleDescriptor* temp = vehicle_;
  vehicle_ = NULL;
  return temp;
}
void VehiclePosition::set_allocated_vehicle(::transit_realtime::VehicleDescriptor* vehicle) {
  delete vehicle_;
  vehicle_ = vehicle;
  if (vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.vehicle)
}

// optional .transit_realtime.Position position = 2;
bool VehiclePosition::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void VehiclePosition::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::transit_realtime::Position& VehiclePosition::position() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.position)
  return position_ != NULL ? *position_
                         : *::transit_realtime::Position::internal_default_instance();
}
::transit_realtime::Position* VehiclePosition::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::transit_realtime::Position;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.position)
  return position_;
}
::transit_realtime::Position* VehiclePosition::release_position() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.position)
  
  ::transit_realtime::Position* temp = position_;
  position_ = NULL;
  return temp;
}
void VehiclePosition::set_allocated_position(::transit_realtime::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.position)
}

// optional uint32 current_stop_sequence = 3;
void VehiclePosition::clear_current_stop_sequence() {
  current_stop_sequence_ = 0u;
}
::google::protobuf::uint32 VehiclePosition::current_stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.current_stop_sequence)
  return current_stop_sequence_;
}
void VehiclePosition::set_current_stop_sequence(::google::protobuf::uint32 value) {
  
  current_stop_sequence_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.current_stop_sequence)
}

// optional string stop_id = 7;
void VehiclePosition::clear_stop_id() {
  stop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehiclePosition::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.stop_id)
  return stop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehiclePosition::set_stop_id(const ::std::string& value) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.stop_id)
}
void VehiclePosition::set_stop_id(const char* value) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehiclePosition.stop_id)
}
void VehiclePosition::set_stop_id(const char* value, size_t size) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehiclePosition.stop_id)
}
::std::string* VehiclePosition::mutable_stop_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.stop_id)
  return stop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehiclePosition::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.stop_id)
  
  return stop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehiclePosition::set_allocated_stop_id(::std::string* stop_id) {
  if (stop_id != NULL) {
    
  } else {
    
  }
  stop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.stop_id)
}

// optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
void VehiclePosition::clear_current_status() {
  current_status_ = 0;
}
::transit_realtime::VehiclePosition_VehicleStopStatus VehiclePosition::current_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.current_status)
  return static_cast< ::transit_realtime::VehiclePosition_VehicleStopStatus >(current_status_);
}
void VehiclePosition::set_current_status(::transit_realtime::VehiclePosition_VehicleStopStatus value) {
  
  current_status_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.current_status)
}

// optional uint64 timestamp = 5;
void VehiclePosition::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VehiclePosition::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.timestamp)
  return timestamp_;
}
void VehiclePosition::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.timestamp)
}

// optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
void VehiclePosition::clear_congestion_level() {
  congestion_level_ = 0;
}
::transit_realtime::VehiclePosition_CongestionLevel VehiclePosition::congestion_level() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.congestion_level)
  return static_cast< ::transit_realtime::VehiclePosition_CongestionLevel >(congestion_level_);
}
void VehiclePosition::set_congestion_level(::transit_realtime::VehiclePosition_CongestionLevel value) {
  
  congestion_level_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.congestion_level)
}

// optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
void VehiclePosition::clear_occupancy_status() {
  occupancy_status_ = 0;
}
::transit_realtime::VehiclePosition_OccupancyStatus VehiclePosition::occupancy_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.occupancy_status)
  return static_cast< ::transit_realtime::VehiclePosition_OccupancyStatus >(occupancy_status_);
}
void VehiclePosition::set_occupancy_status(::transit_realtime::VehiclePosition_OccupancyStatus value) {
  
  occupancy_status_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.occupancy_status)
}

inline const VehiclePosition* VehiclePosition::internal_default_instance() {
  return &VehiclePosition_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Alert_Cause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_Cause_descriptor_;
}
bool Alert_Cause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Alert_Cause Alert::PROTO3_DEFAULT_CAUSE;
const Alert_Cause Alert::UNKNOWN_CAUSE;
const Alert_Cause Alert::OTHER_CAUSE;
const Alert_Cause Alert::TECHNICAL_PROBLEM;
const Alert_Cause Alert::STRIKE;
const Alert_Cause Alert::DEMONSTRATION;
const Alert_Cause Alert::ACCIDENT;
const Alert_Cause Alert::HOLIDAY;
const Alert_Cause Alert::WEATHER;
const Alert_Cause Alert::MAINTENANCE;
const Alert_Cause Alert::CONSTRUCTION;
const Alert_Cause Alert::POLICE_ACTIVITY;
const Alert_Cause Alert::MEDICAL_EMERGENCY;
const Alert_Cause Alert::Cause_MIN;
const Alert_Cause Alert::Cause_MAX;
const int Alert::Cause_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Alert_Effect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_Effect_descriptor_;
}
bool Alert_Effect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Alert_Effect Alert::PROTO3_DEFAULT_EFFECT;
const Alert_Effect Alert::NO_SERVICE;
const Alert_Effect Alert::REDUCED_SERVICE;
const Alert_Effect Alert::SIGNIFICANT_DELAYS;
const Alert_Effect Alert::DETOUR;
const Alert_Effect Alert::ADDITIONAL_SERVICE;
const Alert_Effect Alert::MODIFIED_SERVICE;
const Alert_Effect Alert::OTHER_EFFECT;
const Alert_Effect Alert::UNKNOWN_EFFECT;
const Alert_Effect Alert::STOP_MOVED;
const Alert_Effect Alert::Effect_MIN;
const Alert_Effect Alert::Effect_MAX;
const int Alert::Effect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alert::kActivePeriodFieldNumber;
const int Alert::kInformedEntityFieldNumber;
const int Alert::kCauseFieldNumber;
const int Alert::kEffectFieldNumber;
const int Alert::kUrlFieldNumber;
const int Alert::kHeaderTextFieldNumber;
const int Alert::kDescriptionTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alert::Alert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.Alert)
}

void Alert::InitAsDefaultInstance() {
  url_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
  header_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
  description_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
}

Alert::Alert(const Alert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Alert)
}

void Alert::SharedCtor() {
  url_ = NULL;
  header_text_ = NULL;
  description_text_ = NULL;
  ::memset(&cause_, 0, reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&cause_) + sizeof(effect_));
  _cached_size_ = 0;
}

Alert::~Alert() {
  // @@protoc_insertion_point(destructor:transit_realtime.Alert)
  SharedDtor();
}

void Alert::SharedDtor() {
  if (this != &Alert_default_instance_.get()) {
    delete url_;
    delete header_text_;
    delete description_text_;
  }
}

void Alert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_descriptor_;
}

const Alert& Alert::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Alert> Alert_default_instance_;

Alert* Alert::New(::google::protobuf::Arena* arena) const {
  Alert* n = new Alert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Alert)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Alert, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Alert*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cause_, effect_);
  if (GetArenaNoVirtual() == NULL && url_ != NULL) delete url_;
  url_ = NULL;
  if (GetArenaNoVirtual() == NULL && header_text_ != NULL) delete header_text_;
  header_text_ = NULL;
  if (GetArenaNoVirtual() == NULL && description_text_ != NULL) delete description_text_;
  description_text_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  active_period_.Clear();
  informed_entity_.Clear();
}

bool Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.Alert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TimeRange active_period = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_active_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_active_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_active_period;
        if (input->ExpectTag(42)) goto parse_loop_informed_entity;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .transit_realtime.EntitySelector informed_entity = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_informed_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_informed_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_informed_entity;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_cause;
        break;
      }

      // optional .transit_realtime.Alert.Cause cause = 6;
      case 6: {
        if (tag == 48) {
         parse_cause:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cause(static_cast< ::transit_realtime::Alert_Cause >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_effect;
        break;
      }

      // optional .transit_realtime.Alert.Effect effect = 7;
      case 7: {
        if (tag == 56) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_effect(static_cast< ::transit_realtime::Alert_Effect >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional .transit_realtime.TranslatedString url = 8;
      case 8: {
        if (tag == 66) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_header_text;
        break;
      }

      // optional .transit_realtime.TranslatedString header_text = 10;
      case 10: {
        if (tag == 82) {
         parse_header_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_description_text;
        break;
      }

      // optional .transit_realtime.TranslatedString description_text = 11;
      case 11: {
        if (tag == 90) {
         parse_description_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.Alert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.Alert)
  return false;
#undef DO_
}

void Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.Alert)
  // repeated .transit_realtime.TimeRange active_period = 1;
  for (unsigned int i = 0, n = this->active_period_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->active_period(i), output);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (unsigned int i = 0, n = this->informed_entity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->informed_entity(i), output);
  }

  // optional .transit_realtime.Alert.Cause cause = 6;
  if (this->cause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cause(), output);
  }

  // optional .transit_realtime.Alert.Effect effect = 7;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->effect(), output);
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (this->has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->url_, output);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (this->has_header_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->header_text_, output);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (this->has_description_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->description_text_, output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.Alert)
}

::google::protobuf::uint8* Alert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Alert)
  // repeated .transit_realtime.TimeRange active_period = 1;
  for (unsigned int i = 0, n = this->active_period_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->active_period(i), false, target);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (unsigned int i = 0, n = this->informed_entity_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->informed_entity(i), false, target);
  }

  // optional .transit_realtime.Alert.Cause cause = 6;
  if (this->cause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cause(), target);
  }

  // optional .transit_realtime.Alert.Effect effect = 7;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->effect(), target);
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (this->has_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->url_, false, target);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (this->has_header_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->header_text_, false, target);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (this->has_description_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->description_text_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Alert)
  return target;
}

size_t Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Alert)
  size_t total_size = 0;

  // optional .transit_realtime.Alert.Cause cause = 6;
  if (this->cause() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cause());
  }

  // optional .transit_realtime.Alert.Effect effect = 7;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (this->has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->url_);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (this->has_header_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_text_);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (this->has_description_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_text_);
  }

  // repeated .transit_realtime.TimeRange active_period = 1;
  {
    unsigned int count = this->active_period_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active_period(i));
    }
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  {
    unsigned int count = this->informed_entity_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->informed_entity(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.Alert)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Alert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Alert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.Alert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.Alert)
    UnsafeMergeFrom(*source);
  }
}

void Alert::MergeFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Alert)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Alert::UnsafeMergeFrom(const Alert& from) {
  GOOGLE_DCHECK(&from != this);
  active_period_.MergeFrom(from.active_period_);
  informed_entity_.MergeFrom(from.informed_entity_);
  if (from.cause() != 0) {
    set_cause(from.cause());
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
  if (from.has_url()) {
    mutable_url()->::transit_realtime::TranslatedString::MergeFrom(from.url());
  }
  if (from.has_header_text()) {
    mutable_header_text()->::transit_realtime::TranslatedString::MergeFrom(from.header_text());
  }
  if (from.has_description_text()) {
    mutable_description_text()->::transit_realtime::TranslatedString::MergeFrom(from.description_text());
  }
}

void Alert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alert::CopyFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Alert)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Alert::IsInitialized() const {

  return true;
}

void Alert::Swap(Alert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alert::InternalSwap(Alert* other) {
  active_period_.UnsafeArenaSwap(&other->active_period_);
  informed_entity_.UnsafeArenaSwap(&other->informed_entity_);
  std::swap(cause_, other->cause_);
  std::swap(effect_, other->effect_);
  std::swap(url_, other->url_);
  std::swap(header_text_, other->header_text_);
  std::swap(description_text_, other->description_text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Alert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alert_descriptor_;
  metadata.reflection = Alert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Alert

// repeated .transit_realtime.TimeRange active_period = 1;
int Alert::active_period_size() const {
  return active_period_.size();
}
void Alert::clear_active_period() {
  active_period_.Clear();
}
const ::transit_realtime::TimeRange& Alert::active_period(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.active_period)
  return active_period_.Get(index);
}
::transit_realtime::TimeRange* Alert::mutable_active_period(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.active_period)
  return active_period_.Mutable(index);
}
::transit_realtime::TimeRange* Alert::add_active_period() {
  // @@protoc_insertion_point(field_add:transit_realtime.Alert.active_period)
  return active_period_.Add();
}
::google::protobuf::RepeatedPtrField< ::transit_realtime::TimeRange >*
Alert::mutable_active_period() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.Alert.active_period)
  return &active_period_;
}
const ::google::protobuf::RepeatedPtrField< ::transit_realtime::TimeRange >&
Alert::active_period() const {
  // @@protoc_insertion_point(field_list:transit_realtime.Alert.active_period)
  return active_period_;
}

// repeated .transit_realtime.EntitySelector informed_entity = 5;
int Alert::informed_entity_size() const {
  return informed_entity_.size();
}
void Alert::clear_informed_entity() {
  informed_entity_.Clear();
}
const ::transit_realtime::EntitySelector& Alert::informed_entity(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.informed_entity)
  return informed_entity_.Get(index);
}
::transit_realtime::EntitySelector* Alert::mutable_informed_entity(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.informed_entity)
  return informed_entity_.Mutable(index);
}
::transit_realtime::EntitySelector* Alert::add_informed_entity() {
  // @@protoc_insertion_point(field_add:transit_realtime.Alert.informed_entity)
  return informed_entity_.Add();
}
::google::protobuf::RepeatedPtrField< ::transit_realtime::EntitySelector >*
Alert::mutable_informed_entity() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.Alert.informed_entity)
  return &informed_entity_;
}
const ::google::protobuf::RepeatedPtrField< ::transit_realtime::EntitySelector >&
Alert::informed_entity() const {
  // @@protoc_insertion_point(field_list:transit_realtime.Alert.informed_entity)
  return informed_entity_;
}

// optional .transit_realtime.Alert.Cause cause = 6;
void Alert::clear_cause() {
  cause_ = 0;
}
::transit_realtime::Alert_Cause Alert::cause() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.cause)
  return static_cast< ::transit_realtime::Alert_Cause >(cause_);
}
void Alert::set_cause(::transit_realtime::Alert_Cause value) {
  
  cause_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.cause)
}

// optional .transit_realtime.Alert.Effect effect = 7;
void Alert::clear_effect() {
  effect_ = 0;
}
::transit_realtime::Alert_Effect Alert::effect() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.effect)
  return static_cast< ::transit_realtime::Alert_Effect >(effect_);
}
void Alert::set_effect(::transit_realtime::Alert_Effect value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.effect)
}

// optional .transit_realtime.TranslatedString url = 8;
bool Alert::has_url() const {
  return this != internal_default_instance() && url_ != NULL;
}
void Alert::clear_url() {
  if (GetArenaNoVirtual() == NULL && url_ != NULL) delete url_;
  url_ = NULL;
}
const ::transit_realtime::TranslatedString& Alert::url() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.url)
  return url_ != NULL ? *url_
                         : *::transit_realtime::TranslatedString::internal_default_instance();
}
::transit_realtime::TranslatedString* Alert::mutable_url() {
  
  if (url_ == NULL) {
    url_ = new ::transit_realtime::TranslatedString;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.url)
  return url_;
}
::transit_realtime::TranslatedString* Alert::release_url() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.url)
  
  ::transit_realtime::TranslatedString* temp = url_;
  url_ = NULL;
  return temp;
}
void Alert::set_allocated_url(::transit_realtime::TranslatedString* url) {
  delete url_;
  url_ = url;
  if (url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.url)
}

// optional .transit_realtime.TranslatedString header_text = 10;
bool Alert::has_header_text() const {
  return this != internal_default_instance() && header_text_ != NULL;
}
void Alert::clear_header_text() {
  if (GetArenaNoVirtual() == NULL && header_text_ != NULL) delete header_text_;
  header_text_ = NULL;
}
const ::transit_realtime::TranslatedString& Alert::header_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.header_text)
  return header_text_ != NULL ? *header_text_
                         : *::transit_realtime::TranslatedString::internal_default_instance();
}
::transit_realtime::TranslatedString* Alert::mutable_header_text() {
  
  if (header_text_ == NULL) {
    header_text_ = new ::transit_realtime::TranslatedString;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.header_text)
  return header_text_;
}
::transit_realtime::TranslatedString* Alert::release_header_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.header_text)
  
  ::transit_realtime::TranslatedString* temp = header_text_;
  header_text_ = NULL;
  return temp;
}
void Alert::set_allocated_header_text(::transit_realtime::TranslatedString* header_text) {
  delete header_text_;
  header_text_ = header_text;
  if (header_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.header_text)
}

// optional .transit_realtime.TranslatedString description_text = 11;
bool Alert::has_description_text() const {
  return this != internal_default_instance() && description_text_ != NULL;
}
void Alert::clear_description_text() {
  if (GetArenaNoVirtual() == NULL && description_text_ != NULL) delete description_text_;
  description_text_ = NULL;
}
const ::transit_realtime::TranslatedString& Alert::description_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.description_text)
  return description_text_ != NULL ? *description_text_
                         : *::transit_realtime::TranslatedString::internal_default_instance();
}
::transit_realtime::TranslatedString* Alert::mutable_description_text() {
  
  if (description_text_ == NULL) {
    description_text_ = new ::transit_realtime::TranslatedString;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.description_text)
  return description_text_;
}
::transit_realtime::TranslatedString* Alert::release_description_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.description_text)
  
  ::transit_realtime::TranslatedString* temp = description_text_;
  description_text_ = NULL;
  return temp;
}
void Alert::set_allocated_description_text(::transit_realtime::TranslatedString* description_text) {
  delete description_text_;
  description_text_ = description_text;
  if (description_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.description_text)
}

inline const Alert* Alert::internal_default_instance() {
  return &Alert_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRange::kStartFieldNumber;
const int TimeRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRange::TimeRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TimeRange)
}

void TimeRange::InitAsDefaultInstance() {
}

TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TimeRange)
}

void TimeRange::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:transit_realtime.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
}

void TimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeRange_descriptor_;
}

const TimeRange& TimeRange::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimeRange> TimeRange_default_instance_;

TimeRange* TimeRange::New(::google::protobuf::Arena* arena) const {
  TimeRange* n = new TimeRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TimeRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, end_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TimeRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional uint64 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TimeRange)
  return false;
#undef DO_
}

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TimeRange)
  // optional uint64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // optional uint64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TimeRange)
}

::google::protobuf::uint8* TimeRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TimeRange)
  // optional uint64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }

  // optional uint64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TimeRange)
  size_t total_size = 0;

  // optional uint64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start());
  }

  // optional uint64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TimeRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TimeRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TimeRange)
    UnsafeMergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TimeRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimeRange::UnsafeMergeFrom(const TimeRange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void TimeRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TimeRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimeRange::IsInitialized() const {

  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRange::InternalSwap(TimeRange* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeRange_descriptor_;
  metadata.reflection = TimeRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRange

// optional uint64 start = 1;
void TimeRange::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimeRange::start() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TimeRange.start)
  return start_;
}
void TimeRange::set_start(::google::protobuf::uint64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TimeRange.start)
}

// optional uint64 end = 2;
void TimeRange::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimeRange::end() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TimeRange.end)
  return end_;
}
void TimeRange::set_end(::google::protobuf::uint64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TimeRange.end)
}

inline const TimeRange* TimeRange::internal_default_instance() {
  return &TimeRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLatitudeFieldNumber;
const int Position::kLongitudeFieldNumber;
const int Position::kBearingFieldNumber;
const int Position::kOdometerFieldNumber;
const int Position::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(speed_));
  _cached_size_ = 0;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:transit_realtime.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Position> Position_default_instance_;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(latitude_, speed_);

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (tag == 21) {
         parse_longitude:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bearing;
        break;
      }

      // optional float bearing = 3;
      case 3: {
        if (tag == 29) {
         parse_bearing:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_odometer;
        break;
      }

      // optional double odometer = 4;
      case 4: {
        if (tag == 33) {
         parse_odometer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (tag == 45) {
         parse_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.Position)
  // optional float latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional float bearing = 3;
  if (this->bearing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bearing(), output);
  }

  // optional double odometer = 4;
  if (this->odometer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odometer(), output);
  }

  // optional float speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Position)
  // optional float latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional float bearing = 3;
  if (this->bearing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bearing(), target);
  }

  // optional double odometer = 4;
  if (this->odometer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odometer(), target);
  }

  // optional float speed = 5;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Position)
  size_t total_size = 0;

  // optional float latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // optional float longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // optional float bearing = 3;
  if (this->bearing() != 0) {
    total_size += 1 + 4;
  }

  // optional double odometer = 4;
  if (this->odometer() != 0) {
    total_size += 1 + 8;
  }

  // optional float speed = 5;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.Position)
    UnsafeMergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Position)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Position::UnsafeMergeFrom(const Position& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.bearing() != 0) {
    set_bearing(from.bearing());
  }
  if (from.odometer() != 0) {
    set_odometer(from.odometer());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Position)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(bearing_, other->bearing_);
  std::swap(odometer_, other->odometer_);
  std::swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional float latitude = 1;
void Position::clear_latitude() {
  latitude_ = 0;
}
float Position::latitude() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.latitude)
  return latitude_;
}
void Position::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Position.latitude)
}

// optional float longitude = 2;
void Position::clear_longitude() {
  longitude_ = 0;
}
float Position::longitude() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.longitude)
  return longitude_;
}
void Position::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Position.longitude)
}

// optional float bearing = 3;
void Position::clear_bearing() {
  bearing_ = 0;
}
float Position::bearing() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.bearing)
  return bearing_;
}
void Position::set_bearing(float value) {
  
  bearing_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Position.bearing)
}

// optional double odometer = 4;
void Position::clear_odometer() {
  odometer_ = 0;
}
double Position::odometer() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.odometer)
  return odometer_;
}
void Position::set_odometer(double value) {
  
  odometer_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Position.odometer)
}

// optional float speed = 5;
void Position::clear_speed() {
  speed_ = 0;
}
float Position::speed() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.speed)
  return speed_;
}
void Position::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.Position.speed)
}

inline const Position* Position::internal_default_instance() {
  return &Position_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDescriptor_ScheduleRelationship_descriptor_;
}
bool TripDescriptor_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TripDescriptor_ScheduleRelationship TripDescriptor::SCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::ADDED;
const TripDescriptor_ScheduleRelationship TripDescriptor::UNSCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::CANCELED;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MIN;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MAX;
const int TripDescriptor::ScheduleRelationship_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripDescriptor::kTripIdFieldNumber;
const int TripDescriptor::kRouteIdFieldNumber;
const int TripDescriptor::kDirectionIdFieldNumber;
const int TripDescriptor::kStartTimeFieldNumber;
const int TripDescriptor::kStartDateFieldNumber;
const int TripDescriptor::kScheduleRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripDescriptor::TripDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripDescriptor)
}

void TripDescriptor::InitAsDefaultInstance() {
}

TripDescriptor::TripDescriptor(const TripDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripDescriptor)
}

void TripDescriptor::SharedCtor() {
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_id_, 0, reinterpret_cast<char*>(&schedule_relationship_) -
    reinterpret_cast<char*>(&direction_id_) + sizeof(schedule_relationship_));
  _cached_size_ = 0;
}

TripDescriptor::~TripDescriptor() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripDescriptor)
  SharedDtor();
}

void TripDescriptor::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TripDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDescriptor_descriptor_;
}

const TripDescriptor& TripDescriptor::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TripDescriptor> TripDescriptor_default_instance_;

TripDescriptor* TripDescriptor::New(::google::protobuf::Arena* arena) const {
  TripDescriptor* n = new TripDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TripDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TripDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(direction_id_, schedule_relationship_);
  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trip_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trip_id().data(), this->trip_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TripDescriptor.trip_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }

      // optional string start_time = 2;
      case 2: {
        if (tag == 18) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TripDescriptor.start_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_date;
        break;
      }

      // optional string start_date = 3;
      case 3: {
        if (tag == 26) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_date().data(), this->start_date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TripDescriptor.start_date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_schedule_relationship;
        break;
      }

      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4: {
        if (tag == 32) {
         parse_schedule_relationship:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_schedule_relationship(static_cast< ::transit_realtime::TripDescriptor_ScheduleRelationship >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_route_id;
        break;
      }

      // optional string route_id = 5;
      case 5: {
        if (tag == 42) {
         parse_route_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_id().data(), this->route_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TripDescriptor.route_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_direction_id;
        break;
      }

      // optional uint32 direction_id = 6;
      case 6: {
        if (tag == 48) {
         parse_direction_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripDescriptor)
  return false;
#undef DO_
}

void TripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripDescriptor)
  // optional string trip_id = 1;
  if (this->trip_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trip_id().data(), this->trip_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.trip_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trip_id(), output);
  }

  // optional string start_time = 2;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_time(), output);
  }

  // optional string start_date = 3;
  if (this->start_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.start_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_date(), output);
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (this->schedule_relationship() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->schedule_relationship(), output);
  }

  // optional string route_id = 5;
  if (this->route_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.route_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->route_id(), output);
  }

  // optional uint32 direction_id = 6;
  if (this->direction_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->direction_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TripDescriptor)
}

::google::protobuf::uint8* TripDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripDescriptor)
  // optional string trip_id = 1;
  if (this->trip_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trip_id().data(), this->trip_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.trip_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trip_id(), target);
  }

  // optional string start_time = 2;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }

  // optional string start_date = 3;
  if (this->start_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.start_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_date(), target);
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (this->schedule_relationship() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->schedule_relationship(), target);
  }

  // optional string route_id = 5;
  if (this->route_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TripDescriptor.route_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->route_id(), target);
  }

  // optional uint32 direction_id = 6;
  if (this->direction_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->direction_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripDescriptor)
  return target;
}

size_t TripDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripDescriptor)
  size_t total_size = 0;

  // optional string trip_id = 1;
  if (this->trip_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trip_id());
  }

  // optional string route_id = 5;
  if (this->route_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_id());
  }

  // optional uint32 direction_id = 6;
  if (this->direction_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->direction_id());
  }

  // optional string start_time = 2;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // optional string start_date = 3;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_date());
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (this->schedule_relationship() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TripDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void TripDescriptor::MergeFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TripDescriptor::UnsafeMergeFrom(const TripDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.trip_id().size() > 0) {

    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.route_id().size() > 0) {

    route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
  }
  if (from.direction_id() != 0) {
    set_direction_id(from.direction_id());
  }
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.schedule_relationship() != 0) {
    set_schedule_relationship(from.schedule_relationship());
  }
}

void TripDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDescriptor::CopyFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TripDescriptor::IsInitialized() const {

  return true;
}

void TripDescriptor::Swap(TripDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripDescriptor::InternalSwap(TripDescriptor* other) {
  trip_id_.Swap(&other->trip_id_);
  route_id_.Swap(&other->route_id_);
  std::swap(direction_id_, other->direction_id_);
  start_time_.Swap(&other->start_time_);
  start_date_.Swap(&other->start_date_);
  std::swap(schedule_relationship_, other->schedule_relationship_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDescriptor_descriptor_;
  metadata.reflection = TripDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripDescriptor

// optional string trip_id = 1;
void TripDescriptor::clear_trip_id() {
  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TripDescriptor::trip_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.trip_id)
  return trip_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_trip_id(const ::std::string& value) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.trip_id)
}
void TripDescriptor::set_trip_id(const char* value) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.trip_id)
}
void TripDescriptor::set_trip_id(const char* value, size_t size) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.trip_id)
}
::std::string* TripDescriptor::mutable_trip_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.trip_id)
  return trip_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripDescriptor::release_trip_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.trip_id)
  
  return trip_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_allocated_trip_id(::std::string* trip_id) {
  if (trip_id != NULL) {
    
  } else {
    
  }
  trip_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.trip_id)
}

// optional string route_id = 5;
void TripDescriptor::clear_route_id() {
  route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TripDescriptor::route_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.route_id)
  return route_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_route_id(const ::std::string& value) {
  
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.route_id)
}
void TripDescriptor::set_route_id(const char* value) {
  
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.route_id)
}
void TripDescriptor::set_route_id(const char* value, size_t size) {
  
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.route_id)
}
::std::string* TripDescriptor::mutable_route_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.route_id)
  return route_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripDescriptor::release_route_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.route_id)
  
  return route_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_allocated_route_id(::std::string* route_id) {
  if (route_id != NULL) {
    
  } else {
    
  }
  route_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.route_id)
}

// optional uint32 direction_id = 6;
void TripDescriptor::clear_direction_id() {
  direction_id_ = 0u;
}
::google::protobuf::uint32 TripDescriptor::direction_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.direction_id)
  return direction_id_;
}
void TripDescriptor::set_direction_id(::google::protobuf::uint32 value) {
  
  direction_id_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.direction_id)
}

// optional string start_time = 2;
void TripDescriptor::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TripDescriptor::start_time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.start_time)
  return start_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.start_time)
}
void TripDescriptor::set_start_time(const char* value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.start_time)
}
void TripDescriptor::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.start_time)
}
::std::string* TripDescriptor::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripDescriptor::release_start_time() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.start_time)
}

// optional string start_date = 3;
void TripDescriptor::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TripDescriptor::start_date() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.start_date)
  return start_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_start_date(const ::std::string& value) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.start_date)
}
void TripDescriptor::set_start_date(const char* value) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.start_date)
}
void TripDescriptor::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.start_date)
}
::std::string* TripDescriptor::mutable_start_date() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.start_date)
  return start_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripDescriptor::release_start_date() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.start_date)
  
  return start_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripDescriptor::set_allocated_start_date(::std::string* start_date) {
  if (start_date != NULL) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.start_date)
}

// optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
void TripDescriptor::clear_schedule_relationship() {
  schedule_relationship_ = 0;
}
::transit_realtime::TripDescriptor_ScheduleRelationship TripDescriptor::schedule_relationship() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.schedule_relationship)
  return static_cast< ::transit_realtime::TripDescriptor_ScheduleRelationship >(schedule_relationship_);
}
void TripDescriptor::set_schedule_relationship(::transit_realtime::TripDescriptor_ScheduleRelationship value) {
  
  schedule_relationship_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.schedule_relationship)
}

inline const TripDescriptor* TripDescriptor::internal_default_instance() {
  return &TripDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDescriptor::kIdFieldNumber;
const int VehicleDescriptor::kLabelFieldNumber;
const int VehicleDescriptor::kLicensePlateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDescriptor::VehicleDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.VehicleDescriptor)
}

void VehicleDescriptor::InitAsDefaultInstance() {
}

VehicleDescriptor::VehicleDescriptor(const VehicleDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehicleDescriptor)
}

void VehicleDescriptor::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VehicleDescriptor::~VehicleDescriptor() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehicleDescriptor)
  SharedDtor();
}

void VehicleDescriptor::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleDescriptor_descriptor_;
}

const VehicleDescriptor& VehicleDescriptor::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VehicleDescriptor> VehicleDescriptor_default_instance_;

VehicleDescriptor* VehicleDescriptor::New(::google::protobuf::Arena* arena) const {
  VehicleDescriptor* n = new VehicleDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehicleDescriptor)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VehicleDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.VehicleDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.VehicleDescriptor.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.VehicleDescriptor.label"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_license_plate;
        break;
      }

      // optional string license_plate = 3;
      case 3: {
        if (tag == 26) {
         parse_license_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->license_plate().data(), this->license_plate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.VehicleDescriptor.license_plate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.VehicleDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.VehicleDescriptor)
  return false;
#undef DO_
}

void VehicleDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.VehicleDescriptor)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehicleDescriptor.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehicleDescriptor.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional string license_plate = 3;
  if (this->license_plate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->license_plate().data(), this->license_plate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehicleDescriptor.license_plate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->license_plate(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.VehicleDescriptor)
}

::google::protobuf::uint8* VehicleDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehicleDescriptor)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehicleDescriptor.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehicleDescriptor.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string license_plate = 3;
  if (this->license_plate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->license_plate().data(), this->license_plate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.VehicleDescriptor.license_plate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->license_plate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehicleDescriptor)
  return target;
}

size_t VehicleDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehicleDescriptor)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // optional string license_plate = 3;
  if (this->license_plate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->license_plate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.VehicleDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.VehicleDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.VehicleDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void VehicleDescriptor::MergeFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehicleDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VehicleDescriptor::UnsafeMergeFrom(const VehicleDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.license_plate().size() > 0) {

    license_plate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_plate_);
  }
}

void VehicleDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.VehicleDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDescriptor::CopyFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehicleDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VehicleDescriptor::IsInitialized() const {

  return true;
}

void VehicleDescriptor::Swap(VehicleDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDescriptor::InternalSwap(VehicleDescriptor* other) {
  id_.Swap(&other->id_);
  label_.Swap(&other->label_);
  license_plate_.Swap(&other->license_plate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleDescriptor_descriptor_;
  metadata.reflection = VehicleDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleDescriptor

// optional string id = 1;
void VehicleDescriptor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleDescriptor::id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleDescriptor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.id)
}
void VehicleDescriptor::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehicleDescriptor.id)
}
void VehicleDescriptor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehicleDescriptor.id)
}
::std::string* VehicleDescriptor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleDescriptor::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.id)
}

// optional string label = 2;
void VehicleDescriptor::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleDescriptor::label() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleDescriptor::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.label)
}
void VehicleDescriptor::set_label(const char* value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehicleDescriptor.label)
}
void VehicleDescriptor::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehicleDescriptor.label)
}
::std::string* VehicleDescriptor::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleDescriptor::release_label() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleDescriptor::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.label)
}

// optional string license_plate = 3;
void VehicleDescriptor::clear_license_plate() {
  license_plate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleDescriptor::license_plate() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.license_plate)
  return license_plate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleDescriptor::set_license_plate(const ::std::string& value) {
  
  license_plate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.license_plate)
}
void VehicleDescriptor::set_license_plate(const char* value) {
  
  license_plate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehicleDescriptor.license_plate)
}
void VehicleDescriptor::set_license_plate(const char* value, size_t size) {
  
  license_plate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehicleDescriptor.license_plate)
}
::std::string* VehicleDescriptor::mutable_license_plate() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.license_plate)
  return license_plate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleDescriptor::release_license_plate() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.license_plate)
  
  return license_plate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleDescriptor::set_allocated_license_plate(::std::string* license_plate) {
  if (license_plate != NULL) {
    
  } else {
    
  }
  license_plate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_plate);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.license_plate)
}

inline const VehicleDescriptor* VehicleDescriptor::internal_default_instance() {
  return &VehicleDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntitySelector::kAgencyIdFieldNumber;
const int EntitySelector::kRouteIdFieldNumber;
const int EntitySelector::kRouteTypeFieldNumber;
const int EntitySelector::kTripFieldNumber;
const int EntitySelector::kStopIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntitySelector::EntitySelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.EntitySelector)
}

void EntitySelector::InitAsDefaultInstance() {
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
}

EntitySelector::EntitySelector(const EntitySelector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.EntitySelector)
}

void EntitySelector::SharedCtor() {
  agency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_ = NULL;
  route_type_ = 0;
  _cached_size_ = 0;
}

EntitySelector::~EntitySelector() {
  // @@protoc_insertion_point(destructor:transit_realtime.EntitySelector)
  SharedDtor();
}

void EntitySelector::SharedDtor() {
  agency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &EntitySelector_default_instance_.get()) {
    delete trip_;
  }
}

void EntitySelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitySelector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntitySelector_descriptor_;
}

const EntitySelector& EntitySelector::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EntitySelector> EntitySelector_default_instance_;

EntitySelector* EntitySelector::New(::google::protobuf::Arena* arena) const {
  EntitySelector* n = new EntitySelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntitySelector::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.EntitySelector)
  agency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_type_ = 0;
  if (GetArenaNoVirtual() == NULL && trip_ != NULL) delete trip_;
  trip_ = NULL;
  stop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EntitySelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.EntitySelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agency_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agency_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->agency_id().data(), this->agency_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.EntitySelector.agency_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_route_id;
        break;
      }

      // optional string route_id = 2;
      case 2: {
        if (tag == 18) {
         parse_route_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_id().data(), this->route_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.EntitySelector.route_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_route_type;
        break;
      }

      // optional int32 route_type = 3;
      case 3: {
        if (tag == 24) {
         parse_route_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trip;
        break;
      }

      // optional .transit_realtime.TripDescriptor trip = 4;
      case 4: {
        if (tag == 34) {
         parse_trip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stop_id;
        break;
      }

      // optional string stop_id = 5;
      case 5: {
        if (tag == 42) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stop_id().data(), this->stop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.EntitySelector.stop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.EntitySelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.EntitySelector)
  return false;
#undef DO_
}

void EntitySelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.EntitySelector)
  // optional string agency_id = 1;
  if (this->agency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agency_id().data(), this->agency_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.EntitySelector.agency_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->agency_id(), output);
  }

  // optional string route_id = 2;
  if (this->route_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.EntitySelector.route_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route_id(), output);
  }

  // optional int32 route_type = 3;
  if (this->route_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_type(), output);
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (this->has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->trip_, output);
  }

  // optional string stop_id = 5;
  if (this->stop_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.EntitySelector.stop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stop_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.EntitySelector)
}

::google::protobuf::uint8* EntitySelector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.EntitySelector)
  // optional string agency_id = 1;
  if (this->agency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agency_id().data(), this->agency_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.EntitySelector.agency_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agency_id(), target);
  }

  // optional string route_id = 2;
  if (this->route_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.EntitySelector.route_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route_id(), target);
  }

  // optional int32 route_type = 3;
  if (this->route_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->route_type(), target);
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (this->has_trip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->trip_, false, target);
  }

  // optional string stop_id = 5;
  if (this->stop_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.EntitySelector.stop_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stop_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.EntitySelector)
  return target;
}

size_t EntitySelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.EntitySelector)
  size_t total_size = 0;

  // optional string agency_id = 1;
  if (this->agency_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->agency_id());
  }

  // optional string route_id = 2;
  if (this->route_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_id());
  }

  // optional int32 route_type = 3;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->route_type());
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (this->has_trip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trip_);
  }

  // optional string stop_id = 5;
  if (this->stop_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stop_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySelector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.EntitySelector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EntitySelector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntitySelector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.EntitySelector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.EntitySelector)
    UnsafeMergeFrom(*source);
  }
}

void EntitySelector::MergeFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.EntitySelector)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EntitySelector::UnsafeMergeFrom(const EntitySelector& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.agency_id().size() > 0) {

    agency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agency_id_);
  }
  if (from.route_id().size() > 0) {

    route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
  }
  if (from.route_type() != 0) {
    set_route_type(from.route_type());
  }
  if (from.has_trip()) {
    mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
  }
  if (from.stop_id().size() > 0) {

    stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
  }
}

void EntitySelector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.EntitySelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySelector::CopyFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.EntitySelector)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EntitySelector::IsInitialized() const {

  return true;
}

void EntitySelector::Swap(EntitySelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntitySelector::InternalSwap(EntitySelector* other) {
  agency_id_.Swap(&other->agency_id_);
  route_id_.Swap(&other->route_id_);
  std::swap(route_type_, other->route_type_);
  std::swap(trip_, other->trip_);
  stop_id_.Swap(&other->stop_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntitySelector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntitySelector_descriptor_;
  metadata.reflection = EntitySelector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntitySelector

// optional string agency_id = 1;
void EntitySelector::clear_agency_id() {
  agency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EntitySelector::agency_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.agency_id)
  return agency_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EntitySelector::set_agency_id(const ::std::string& value) {
  
  agency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.agency_id)
}
void EntitySelector::set_agency_id(const char* value) {
  
  agency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.EntitySelector.agency_id)
}
void EntitySelector::set_agency_id(const char* value, size_t size) {
  
  agency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.EntitySelector.agency_id)
}
::std::string* EntitySelector::mutable_agency_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.agency_id)
  return agency_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EntitySelector::release_agency_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.agency_id)
  
  return agency_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EntitySelector::set_allocated_agency_id(::std::string* agency_id) {
  if (agency_id != NULL) {
    
  } else {
    
  }
  agency_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agency_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.agency_id)
}

// optional string route_id = 2;
void EntitySelector::clear_route_id() {
  route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EntitySelector::route_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.route_id)
  return route_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EntitySelector::set_route_id(const ::std::string& value) {
  
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.route_id)
}
void EntitySelector::set_route_id(const char* value) {
  
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.EntitySelector.route_id)
}
void EntitySelector::set_route_id(const char* value, size_t size) {
  
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.EntitySelector.route_id)
}
::std::string* EntitySelector::mutable_route_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.route_id)
  return route_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EntitySelector::release_route_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.route_id)
  
  return route_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EntitySelector::set_allocated_route_id(::std::string* route_id) {
  if (route_id != NULL) {
    
  } else {
    
  }
  route_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.route_id)
}

// optional int32 route_type = 3;
void EntitySelector::clear_route_type() {
  route_type_ = 0;
}
::google::protobuf::int32 EntitySelector::route_type() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.route_type)
  return route_type_;
}
void EntitySelector::set_route_type(::google::protobuf::int32 value) {
  
  route_type_ = value;
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.route_type)
}

// optional .transit_realtime.TripDescriptor trip = 4;
bool EntitySelector::has_trip() const {
  return this != internal_default_instance() && trip_ != NULL;
}
void EntitySelector::clear_trip() {
  if (GetArenaNoVirtual() == NULL && trip_ != NULL) delete trip_;
  trip_ = NULL;
}
const ::transit_realtime::TripDescriptor& EntitySelector::trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.trip)
  return trip_ != NULL ? *trip_
                         : *::transit_realtime::TripDescriptor::internal_default_instance();
}
::transit_realtime::TripDescriptor* EntitySelector::mutable_trip() {
  
  if (trip_ == NULL) {
    trip_ = new ::transit_realtime::TripDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.trip)
  return trip_;
}
::transit_realtime::TripDescriptor* EntitySelector::release_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.trip)
  
  ::transit_realtime::TripDescriptor* temp = trip_;
  trip_ = NULL;
  return temp;
}
void EntitySelector::set_allocated_trip(::transit_realtime::TripDescriptor* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.trip)
}

// optional string stop_id = 5;
void EntitySelector::clear_stop_id() {
  stop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EntitySelector::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.stop_id)
  return stop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EntitySelector::set_stop_id(const ::std::string& value) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.stop_id)
}
void EntitySelector::set_stop_id(const char* value) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.EntitySelector.stop_id)
}
void EntitySelector::set_stop_id(const char* value, size_t size) {
  
  stop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.EntitySelector.stop_id)
}
::std::string* EntitySelector::mutable_stop_id() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.stop_id)
  return stop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EntitySelector::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.stop_id)
  
  return stop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EntitySelector::set_allocated_stop_id(::std::string* stop_id) {
  if (stop_id != NULL) {
    
  } else {
    
  }
  stop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop_id);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.stop_id)
}

inline const EntitySelector* EntitySelector::internal_default_instance() {
  return &EntitySelector_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranslatedString_Translation::kTextFieldNumber;
const int TranslatedString_Translation::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranslatedString_Translation::TranslatedString_Translation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TranslatedString.Translation)
}

void TranslatedString_Translation::InitAsDefaultInstance() {
}

TranslatedString_Translation::TranslatedString_Translation(const TranslatedString_Translation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedString.Translation)
}

void TranslatedString_Translation::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TranslatedString_Translation::~TranslatedString_Translation() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedString.Translation)
  SharedDtor();
}

void TranslatedString_Translation::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TranslatedString_Translation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslatedString_Translation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslatedString_Translation_descriptor_;
}

const TranslatedString_Translation& TranslatedString_Translation::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TranslatedString_Translation> TranslatedString_Translation_default_instance_;

TranslatedString_Translation* TranslatedString_Translation::New(::google::protobuf::Arena* arena) const {
  TranslatedString_Translation* n = new TranslatedString_Translation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TranslatedString_Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedString.Translation)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TranslatedString_Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TranslatedString.Translation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TranslatedString.Translation.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (tag == 18) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transit_realtime.TranslatedString.Translation.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TranslatedString.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TranslatedString.Translation)
  return false;
#undef DO_
}

void TranslatedString_Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TranslatedString.Translation)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TranslatedString.Translation)
}

::google::protobuf::uint8* TranslatedString_Translation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedString.Translation)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedString.Translation)
  return target;
}

size_t TranslatedString_Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedString.Translation)
  size_t total_size = 0;

  // optional string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslatedString_Translation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TranslatedString.Translation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TranslatedString_Translation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TranslatedString_Translation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TranslatedString.Translation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TranslatedString.Translation)
    UnsafeMergeFrom(*source);
  }
}

void TranslatedString_Translation::MergeFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedString.Translation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TranslatedString_Translation::UnsafeMergeFrom(const TranslatedString_Translation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void TranslatedString_Translation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TranslatedString.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslatedString_Translation::CopyFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedString.Translation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TranslatedString_Translation::IsInitialized() const {

  return true;
}

void TranslatedString_Translation::Swap(TranslatedString_Translation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranslatedString_Translation::InternalSwap(TranslatedString_Translation* other) {
  text_.Swap(&other->text_);
  language_.Swap(&other->language_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TranslatedString_Translation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslatedString_Translation_descriptor_;
  metadata.reflection = TranslatedString_Translation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranslatedString::kTranslationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranslatedString::TranslatedString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TranslatedString)
}

void TranslatedString::InitAsDefaultInstance() {
}

TranslatedString::TranslatedString(const TranslatedString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedString)
}

void TranslatedString::SharedCtor() {
  _cached_size_ = 0;
}

TranslatedString::~TranslatedString() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedString)
  SharedDtor();
}

void TranslatedString::SharedDtor() {
}

void TranslatedString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslatedString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslatedString_descriptor_;
}

const TranslatedString& TranslatedString::default_instance() {
  protobuf_InitDefaults_gtfs_2drealtime_2eproto3();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TranslatedString> TranslatedString_default_instance_;

TranslatedString* TranslatedString::New(::google::protobuf::Arena* arena) const {
  TranslatedString* n = new TranslatedString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TranslatedString::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedString)
  translation_.Clear();
}

bool TranslatedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TranslatedString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TranslatedString.Translation translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_translation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TranslatedString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TranslatedString)
  return false;
#undef DO_
}

void TranslatedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TranslatedString)
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (unsigned int i = 0, n = this->translation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->translation(i), output);
  }

  // @@protoc_insertion_point(serialize_end:transit_realtime.TranslatedString)
}

::google::protobuf::uint8* TranslatedString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedString)
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (unsigned int i = 0, n = this->translation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->translation(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedString)
  return target;
}

size_t TranslatedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedString)
  size_t total_size = 0;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  {
    unsigned int count = this->translation_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslatedString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TranslatedString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TranslatedString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TranslatedString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TranslatedString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TranslatedString)
    UnsafeMergeFrom(*source);
  }
}

void TranslatedString::MergeFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedString)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TranslatedString::UnsafeMergeFrom(const TranslatedString& from) {
  GOOGLE_DCHECK(&from != this);
  translation_.MergeFrom(from.translation_);
}

void TranslatedString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TranslatedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslatedString::CopyFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedString)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TranslatedString::IsInitialized() const {

  return true;
}

void TranslatedString::Swap(TranslatedString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranslatedString::InternalSwap(TranslatedString* other) {
  translation_.UnsafeArenaSwap(&other->translation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TranslatedString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslatedString_descriptor_;
  metadata.reflection = TranslatedString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TranslatedString_Translation

// optional string text = 1;
void TranslatedString_Translation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TranslatedString_Translation::text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.Translation.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TranslatedString_Translation::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedString.Translation.text)
}
void TranslatedString_Translation::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedString.Translation.text)
}
void TranslatedString_Translation::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedString.Translation.text)
}
::std::string* TranslatedString_Translation::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.Translation.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TranslatedString_Translation::release_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedString.Translation.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TranslatedString_Translation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedString.Translation.text)
}

// optional string language = 2;
void TranslatedString_Translation::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TranslatedString_Translation::language() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.Translation.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TranslatedString_Translation::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedString.Translation.language)
}
void TranslatedString_Translation::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedString.Translation.language)
}
void TranslatedString_Translation::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedString.Translation.language)
}
::std::string* TranslatedString_Translation::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.Translation.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TranslatedString_Translation::release_language() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedString.Translation.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TranslatedString_Translation::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedString.Translation.language)
}

inline const TranslatedString_Translation* TranslatedString_Translation::internal_default_instance() {
  return &TranslatedString_Translation_default_instance_.get();
}
// -------------------------------------------------------------------

// TranslatedString

// repeated .transit_realtime.TranslatedString.Translation translation = 1;
int TranslatedString::translation_size() const {
  return translation_.size();
}
void TranslatedString::clear_translation() {
  translation_.Clear();
}
const ::transit_realtime::TranslatedString_Translation& TranslatedString::translation(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.translation)
  return translation_.Get(index);
}
::transit_realtime::TranslatedString_Translation* TranslatedString::mutable_translation(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.translation)
  return translation_.Mutable(index);
}
::transit_realtime::TranslatedString_Translation* TranslatedString::add_translation() {
  // @@protoc_insertion_point(field_add:transit_realtime.TranslatedString.translation)
  return translation_.Add();
}
::google::protobuf::RepeatedPtrField< ::transit_realtime::TranslatedString_Translation >*
TranslatedString::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TranslatedString.translation)
  return &translation_;
}
const ::google::protobuf::RepeatedPtrField< ::transit_realtime::TranslatedString_Translation >&
TranslatedString::translation() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TranslatedString.translation)
  return translation_;
}

inline const TranslatedString* TranslatedString::internal_default_instance() {
  return &TranslatedString_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace transit_realtime

// @@protoc_insertion_point(global_scope)
